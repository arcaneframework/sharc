// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/* Author : desrozis at Mon Aug 20 10:18:39 2012
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "../IInitialCondition.h"

#include "Constant_axl.h"

#include "ArcRes/Entities/System.h"
#include "ArcRes/XPath.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"

#include "ArcGeoSim/Numerics/Expressions/IExpressionMng.h"
#include "ArcGeoSim/Numerics/Expressions/ExpressionBuilder/ExpressionBuilderR3vR1Core.h"

#include "ArcGeoSim/Appli/AppService.h"

#include "ArcGeoSim/Mesh/Geometry/IGeometryMng.h"

#include "ArcGeoSim/Utils/ItemTools.h"

#include <arcane/IMesh.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ConstantService 
  : public ArcaneConstantObject
{
public:
  
  ConstantService(const Arcane::ServiceBuildInfo & sbi) 
    : ArcaneConstantObject(sbi)
    , m_initialized(false) {}
  
  ~ConstantService() {}
  
public:

  void init(ArcRes::System& system, Law::VariableCellFolder& domain);

  void revaluate(ArcRes::System& system, Law::VariableCellFolder& domain);

private:

  void _fatalIfNotInitialized() const;

  void _evaluate(ArcRes::System& system, Law::VariableCellFolder& domain) ;

private:
  
  bool m_initialized;
  
  Gump::ScalarRealProperty m_property;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
ConstantService::
_fatalIfNotInitialized() const
{
  if(not m_initialized)
    fatal() << "Constant service is not initialized, call init method before";
}

/*---------------------------------------------------------------------------*/

void 
ConstantService::
init(ArcRes::System& system, Law::VariableCellFolder& domain)
{
  if(m_initialized) return;

  _evaluate(system, domain);

  m_initialized = true;
}

/*---------------------------------------------------------------------------*/

void 
ConstantService::
revaluate(ArcRes::System& system, Law::VariableCellFolder& domain)
{
  _evaluate(system, domain) ;
}

/*---------------------------------------------------------------------------*/

void 
ConstantService::
_evaluate(ArcRes::System& system, Law::VariableCellFolder& domain)
{
  ArcGeoSim::AppService<IExpressionMng> expression_mng;
  ArcGeoSim::AppService<IGeometryMng> geometry_mng;
 
  IGeometryMng::Real3Variable cell_centers 
    = geometry_mng->getReal3VariableProperty(allCells(),IGeometryProperty::PCenter);

  m_property = ArcRes::XPath::scalarRealProperty(system, options()->property());
  
  auto variable = Law::values(domain,m_property);
  
  for(Arcane::Integer i = 0; i < options()->condition.size(); ++i) {

	Arcane::ItemGroup g = allCells();

    if(g.itemKind() != Arcane::IK_Cell)
      fatal() << "Need a cell group";
    
    // Creation de l'expression
    FunctionParser parser;
    parser.init(expression_mng, NULL, traceMng());
    parser.parseString("(x,y,z)->" + options()->condition[i]->value());
    ExpressionBuilderR3vR1Core expression(&parser);
    
    ENUMERATE_CELL(icell, g) {
      Arcane::Real3 center = cell_centers[icell];
      variable[icell] = expression.eval(center[0],center[1],center[2]);
    }
  }
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_CONSTANT(Constant,ConstantService);
