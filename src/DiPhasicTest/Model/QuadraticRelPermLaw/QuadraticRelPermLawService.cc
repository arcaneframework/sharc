// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/* Author : encheryg at Thu Jan 26 17:59:46 2017
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "DiPhasicTest/Model/ILawConfig.h"
#include "DiPhasicTest/Model/ILawProperty.h"

// generated from QuadraticRelPerm.law
#include "QuadraticRelPerm_law.h"

#include "QuadraticRelPermLaw_axl.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class QuadraticRelPermLawService 
  : public ArcaneQuadraticRelPermLawObject
{
public:
  
  QuadraticRelPermLawService(const Arcane::ServiceBuildInfo & sbi) 
    : ArcaneQuadraticRelPermLawObject(sbi) {}
  
  ~QuadraticRelPermLawService() {}
  
public:

  void initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register) ;

  struct Algo {
  public:
    
    Algo() {}

    void compute(const Arcane::Real value, Arcane::Real& result, Arcane::Real& deriv) const {
      const Arcane::Real value2((m_other) ? 1. - value : value);
      const Arcane::Real normS((value2 - m_sMin)/(m_sMax - m_sMin)) ;
      result = (value2 < m_sMin) ? 0. : ((value2 > m_sMax) ? 1. : normS * normS) ;
      const Arcane::Real sign((m_other) ? -1. : 1.);
      deriv = (value2 < m_sMin || value2 > m_sMax ) ? 0. : sign * 2 * normS / (m_sMax - m_sMin) ;
    }
    Arcane::Real m_sMin ;
    Arcane::Real m_sMax ;
    bool m_other ;
  };
private:
  Algo m_algo;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
QuadraticRelPermLawService::
initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register)
{
  m_algo.m_sMin = options() -> sMin() ;
  m_algo.m_sMax = options() -> sMax() ;
  m_algo.m_other = options() -> otherPhaseDependency() ;
  
  QuadraticRelPerm::Signature s;
  s.in = options() -> dependency() -> getProperty() ;
  s.out = p;
  auto f = std::make_shared<QuadraticRelPerm::Function>(s, m_algo, &Algo::compute);
  law_register << f;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_QUADRATICRELPERMLAW(QuadraticRelPermLaw,QuadraticRelPermLawService);
