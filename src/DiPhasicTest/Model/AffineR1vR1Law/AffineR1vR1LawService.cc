// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/* Author : desrozis at Tue Dec  8 11:09:31 2009
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Utils/Utils.h"
#include "DiPhasicTest/Model/ILawConfig.h"
#include "DiPhasicTest/Model/ILawProperty.h"

// generated from AffineR1vR1.law
#include "AffineR1vR1_law.h"

#include "AffineR1vR1Law_axl.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class AffineR1vR1LawService 
  : public ArcaneAffineR1vR1LawObject
{
public:
  struct Algo
  {
  public:
    
    Algo() {}

    void compute(const Arcane::Real value, Arcane::Real& result, Arcane::Real& deriv) const {
      deriv = m_a;
      result =  m_a * value + m_b;
    }
    Arcane::Real m_a;
    Arcane::Real m_b;
  };
public:
  AffineR1vR1LawService(const Arcane::ServiceBuildInfo & sbi)
    : ArcaneAffineR1vR1LawObject(sbi) {}
  ~AffineR1vR1LawService() {}
public:
  void initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register); 
private:
  Arcane::Real m_value;
  Algo m_algo;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
AffineR1vR1LawService::
initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register)
{
  m_algo.m_a = options()->a();
  m_algo.m_b = options()->b();

  AffineR1vR1::Signature s;
  s.in = options() -> dependency() -> getProperty() ;
  s.out = p;
  auto f = std::make_shared<AffineR1vR1::Function>(s, m_algo, &Algo::compute);
  law_register << f;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_AFFINER1VR1LAW(AffineR1vR1Law,AffineR1vR1LawService);
