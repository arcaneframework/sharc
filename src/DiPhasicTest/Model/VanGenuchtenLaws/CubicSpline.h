// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCANEDEMO_DIPHASICTEST_MODEL_VANGENUCHTENLAWS_CUBICSPLINE_H
#define ARCANEDEMO_DIPHASICTEST_MODEL_VANGENUCHTENLAWS_CUBICSPLINE_H
/* Author : encheryg at Fri Feb  3 14:44:10 2017
 * Generated by createNew
 */

#include <ArcGeoSim/Utils/ArcGeoSim.h>

class CubicSpline
{
public:
  
  CubicSpline(const Arcane::Real x1, const Arcane::Real x2, 
              const Arcane::Real y1, const Arcane::Real y2,
              const Arcane::Real k1, const Arcane::Real k2) :
    m_x1(x1)
    , m_x2(x2)
    , m_y1(y1) 
    , m_y2(y2)
    , m_k1(k1)
    , m_k2(k2)
    , m_a(k1 * (x2 - x1) - (y2 - y1))
    , m_b(-k2 * (x2 - x1) + (y2 - y1)) {}
  
  virtual ~CubicSpline() {}
  
public:

  void eval(const Arcane::Real value, Arcane::Real& result) const {
    const Arcane::Real t((value - m_x1) / (m_x2 - m_x1)) ;

    result = (1. - t) * m_y1 + t * m_y2 + t * (1 - t) * (m_a * (1. - t) + m_b * t) ; 
  }

  void eval(const Arcane::Real value, Arcane::Real& result, Arcane::Real& deriv) const {
    eval(value, result) ;
    const Arcane::Real t((value - m_x1) / (m_x2 - m_x1)) ;
    deriv = (m_y2 - m_y1) / (m_x2 - m_x1) + (1. - 2 * t) * (m_a * (1 - t) + m_b * t) / (m_x2 - m_x1) +
      t * (1. - t) * (m_b - m_a) / (m_x2 - m_x1) ;
  }

private:

  const Arcane::Real m_x1 ;
  const Arcane::Real m_x2 ;
  const Arcane::Real m_y1 ;
  const Arcane::Real m_y2 ;
  const Arcane::Real m_k1 ;
  const Arcane::Real m_k2 ;
  const Arcane::Real m_a ;
  const Arcane::Real m_b ;
};

#endif /* ARCANEDEMO_DIPHASICTEST_MODEL_VANGENUCHTENLAWS_CUBICSPLINE_H */
