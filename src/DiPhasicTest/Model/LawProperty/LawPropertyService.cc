// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/* Author : desrozis at Tue May 24 08:36:34 2011
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "DiPhasicTest/Model/ILawProperty.h"

#include "LawProperty_axl.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class LawPropertyService
  : public ArcaneLawPropertyObject
{
public:
  
  LawPropertyService(const Arcane::ServiceBuildInfo & sbi)
    : ArcaneLawPropertyObject(sbi) 
    , m_null_property(NULL) {}
  
  ~LawPropertyService() {}
  
public:

  const Law::ScalarRealProperty& getProperty() const 
  {
    switch(options()->property()) {
    case DiPhasic::PressureId:
      return DiPhasic::Pressure;
    case DiPhasic::GasSaturationId:
      return DiPhasic::GasSaturation;
    case DiPhasic::GasDensityId:
      return DiPhasic::GasDensity;
    case DiPhasic::GasViscosityId:
      return DiPhasic::GasViscosity;
    case DiPhasic::GasRelativePermeabilityId:
      return DiPhasic::GasRelativePermeability;
    case DiPhasic:: OilSaturationId:
      return DiPhasic:: OilSaturation;
    case DiPhasic::OilDensityId:
      return DiPhasic::OilDensity;
    case DiPhasic::OilViscosityId:
      return DiPhasic::OilViscosity;
    case DiPhasic::OilRelativePermeabilityId:
      return DiPhasic::OilRelativePermeability;
    case DiPhasic::PorosityId:
      return DiPhasic::Porosity;
    case DiPhasic::PermeabilityId:
      return DiPhasic::Permeability;
    case DiPhasic::TemperatureId:
      return DiPhasic::Temperature; 
    case DiPhasic::PressureTNId:
      return DiPhasic::PressureTN;
    case DiPhasic:: GasSaturationTNId:
      return DiPhasic:: GasSaturationTN;
    case DiPhasic::OilSaturationTNId:
      return DiPhasic::OilSaturationTN;
    case DiPhasic::OilDensityTNId:
      return DiPhasic::OilDensityTN;
    default:
      fatal() << "Property not defined";
      return *m_null_property;
    }
  }

private:
  
  Law::ScalarRealProperty* m_null_property;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_LAWPROPERTY(LawProperty,LawPropertyService);
