// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/* Author : desrozis at Tue Dec 15 16:42:24 2009
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Utils/Utils.h"
#include "DiPhasicTest/Model/ILawConfig.h"

// generated from Random.law
#include "Random_law.h"

#include "RandomLaw_axl.h"
#include <arcane/random/Uniform01.h>
#include <arcane/random/LinearCongruential.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class RandomLawService
  : public ArcaneRandomLawObject
{
public:
  struct Algo
  {
  public:
    
    Algo() : m_uniform(m_generator) {}
    
    void compute(Arcane::Real& result) const
    {
      const Arcane::Real factor = (m_max_value - m_min_value);
      result = m_min_value + factor * m_uniform();
    }

    Arcane::Real m_max_value;
    Arcane::Real m_min_value;

    Arcane::random::MinstdRand m_generator;
    mutable Arcane::random::Uniform01<Arcane::random::MinstdRand> m_uniform;
  };
public:
  RandomLawService(const Arcane::ServiceBuildInfo & sbi) 
    : ArcaneRandomLawObject(sbi) {}
  ~RandomLawService() {}
public:
  void initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register); 
private:
  Arcane::Real m_min_value;
  Arcane::Real m_max_value;
  Algo m_algo;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
RandomLawService::
initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register)
{
  m_algo.m_min_value = options()->minValue();
  m_algo.m_max_value = options()->maxValue();
  
  Random::Signature s;
  s.out = p;
  auto f = std::make_shared<Random::Function>(s, m_algo, &Algo::compute);
  law_register << f;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_RANDOMLAW(RandomLaw,RandomLawService);
