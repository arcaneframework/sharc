// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/* Author : desrozis at Wed Jan  6 13:06:33 2010
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Utils/Utils.h"
#include "DiPhasicTest/Model/ILawConfig.h"
#include "DiPhasicTest/Model/ILawProperty.h"

#include "ArcGeoSim/Numerics/Expressions/PieceWiseFunction/PieceWiseFunctionR1vR1.h"
#include "ArcGeoSim/Numerics/Expressions/PieceWiseFunction/LinearPieceWiseFunction/LinearInterpolator.h"

// generated from TableR1vR1.law
#include "TableR1vR1_law.h"

#include "TableR1vR1Law_axl.h"


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class TableR1vR1LawService
  : public ArcaneTableR1vR1LawObject
{
public:
  struct Algo 
  {
  public:
    
    /*typedef Law::Signature<Law::In <Law::ScalarReal>,
                           Law::Out<Law::ScalarReal>,
                           Law::Parameters<>
    > Signature;*/
    
    Algo(PieceWiseFunctionR1vR1T<LinearInterpolator>& function)
      : m_function(function) {}

    void compute(const Real value, Real& result, Arcane::Real& deriv) const
    {
      m_function.eval(value,result,deriv);
    }

    PieceWiseFunctionR1vR1T<LinearInterpolator>& m_function;
  };
public:
  TableR1vR1LawService(const Arcane::ServiceBuildInfo & sbi)
    : ArcaneTableR1vR1LawObject(sbi)
    , m_function(traceMng())
    , m_algo(m_function) {}
  ~TableR1vR1LawService() {}
public:
  void initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register); 
private:
  Arcane::Real m_value;
  PieceWiseFunctionR1vR1T<LinearInterpolator> m_function;
  Algo m_algo;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
TableR1vR1LawService::
initialize(const Law::ScalarRealProperty& p, Law::FunctionManager& law_register)
{
  Arcane::RealConstArrayView x = options()->x();
  Arcane::RealConstArrayView y = options()->y();
  if(x.size() != y.size())
    fatal() << "numbers of x and y points are different";
  m_function.initBorderCondition();
  for(Arcane::Integer iPoint = 0; iPoint < x.size(); ++iPoint) {
    m_function.setPoint(x[iPoint], y[iPoint]);
  }
  m_function.init();
  m_function.printPoints();
 
  TableR1vR1::Signature s;
  s.in = options() -> dependency() -> getProperty() ;
  s.out = p;
  auto f = std::make_shared<TableR1vR1::Function>(s, m_algo, &Algo::compute);
  law_register << f;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_TABLER1VR1LAW(TableR1vR1Law,TableR1vR1LawService);
