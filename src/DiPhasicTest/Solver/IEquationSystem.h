// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef IEQUATIONSYSTEM_H
#define IEQUATIONSYSTEM_H
/* Author : desrozis at Fri Dec 11 08:10:05 2009
 * Generated by createNew
 */

#include <arcane/VariableTypedef.h>

// Fonctor pour le controle d'une variable du syst�me
class IVariationCheckEvent
{
public:
  virtual ~IVariationCheckEvent() {}
public:
  virtual Arcane::Real apply(const Arcane::VariableCellReal& variable, Arcane::Real factor) const = 0;
};

// Fonctor de contrainte d'une variable du syst�me
class IConstraintEvent
{
public:
  virtual ~IConstraintEvent() {}
public:
  virtual void apply(Arcane::VariableCellReal& variable) const = 0;
};

// Syst�me d'�quations non lin�aires
class INonLinearEquationSystem
{
public:
  virtual ~INonLinearEquationSystem() { }
public:
 
  // Taille du syst�me
  virtual Arcane::Integer size() const = 0;
  
  // Nom de l'inconnue i
  virtual Arcane::String unknownName(Arcane::Integer i) const = 0;

  // Variable inconnue i
  virtual Arcane::VariableCellReal& residual(Arcane::Integer i) = 0;

  // Variable solution i
  virtual Arcane::VariableCellReal& solution(Arcane::Integer i) = 0;

  // Variable deriv�e solution i
  virtual Arcane::VariableCellReal& derivSolution(Arcane::Integer i) = 0;

  // Variable deriv�e solution i
  virtual void setDerivSolution(Arcane::Integer i, Arcane::VariableCellReal& deriv) = 0;

  // Nom de l'�quation i
  virtual Arcane::String equationName(Arcane::Integer i) const = 0;

  // Cache d'index de l'�quation / entr�e i
  virtual Arcane::IntegerSharedArray cacheIndex(Arcane::Integer i) const = 0;

  // Ev�nement de controle des variations de l'inconnue
  virtual IVariationCheckEvent * variationCheckEvent(Arcane::Integer i) const = 0;

  // Ev�nement de contrainte de l'inconnue
  virtual IConstraintEvent * constraintEvent(Arcane::Integer i) const = 0;
};

#endif /* IEQUATIONSYSTEM_H */
