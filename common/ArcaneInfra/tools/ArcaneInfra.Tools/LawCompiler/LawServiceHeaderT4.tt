<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LawCompiler" #>
<#
  var all_properties = new List<Property> ();
  all_properties.AddRange(Inputs);
  all_properties.AddRange(Outputs);
  all_properties.AddRange(Parameters);
  var static_size = Inputs.Where(p => p.dimension == Dimension.scalar).ToList().Count;
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool. 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef ARCGEOSIM_GENERATED_<#= Law.name.ToUpper() #>LAWOBJECT_H
#define ARCGEOSIM_GENERATED_<#= Law.name.ToUpper() #>LAWOBJECT_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Physics/Law2/IFunction.h"

#include "<#= Law.name #>_axl.h"

#include "ArcGeoSim/Gump/XPath.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class <#= Law.name #>LawObject
  : public Arcane<#= Law.name #>Object
{
private:

  template<typename T>
  class Evaluator
    : public Law::IEvaluator
  {
  public:

    Evaluator(const T& algo,<#= 
All.Select(e => String.Format("const {0}& {1}", e.PropertyType, e.Name))
  .AtBegin(Space.Create(14)).AtBegin("\n").Pack(",") #>)
      : m_algo(algo)<#= 
All.Select(e => String.Format("m_{0}({0})",e.Name))
  .AtBegin(", ").AtBegin(Space.Create(6)).AtBegin("\n").Pack() #> {}

    void evaluate(const Law::State& s,
                        Law::State& r) const { /* deprecated */ }

    void evaluate(const Law::State& s,
                        Law::State& r,
                        Law::Derivative& d) const { /* deprecated */ }

    void evaluate(const Law::VariableAccessor& accessor,
                  const Arcane::ItemGroup& group,
                  const Law::eDerivative mode) const;

    void evaluate(const Law::PartialVariableAccessor& accessor,
                  const Arcane::ItemGroup& group,
                  const Law::eDerivative mode) const;

    void evaluate(const Law::ArrayAccessor& accessor,
                  const Arcane::Integer& begin,
                  const Arcane::Integer& end,
                  const Law::eDerivative mode) const;

  private:

    const T& m_algo;
<# 
  foreach(var p in All) { 
#>
    const <#= p.PropertyType #>& m_<#= p.Name #>;
<# 
  }
#> 
  };

protected:

  template<typename T>
  std::unique_ptr<Law::IEvaluator> algorithm(const T& algo)
  {
    auto* evaluator = new <#= Law.name #>LawObject::Evaluator<T>(algo,<#=
All.Select(e => "m_" + e.Name).AtBegin(Space.Create(10)).AtBegin("\n").Pack(",") #>);

    return std::unique_ptr<Law::IEvaluator>(evaluator);
  }

public:

  <#= Law.name #>LawObject(const Arcane::ServiceBuildInfo& sbi,
                           std::unique_ptr<Law::IEvaluator>&& evaluator)
    : Arcane<#= Law.name #>Object(sbi)
    , m_initialized(false)
    , m_evaluator(std::move(evaluator)) {}

public:

  // A implementer par l'utilisateur
  virtual void configure() = 0;

protected:

  // Acces utilisateur
 
  const Gump::Entity& entity() const { return m_root; } 
 
<# foreach(var p in All) { #> 
  <#= p.PropertyType #>& <#= p.ObjectName #>() { return m_<#= p.Name #>; }
<# } #> 

public:

  void init() { init(m_root); }
  
  void init(Gump::Entity root);
  
  Arcane::Integer id() const { return 0; }

  void evaluate(const Law::State& s,
                      Law::State& r) const 
  { 
    fatal() << "Evaluation with state is not yet supported";
  }

  void evaluate(const Law::State& s,
                      Law::State& r,
                      Law::Derivative& d) const 
  { 
    fatal() << "Evaluation with state is not yet supported";
  }

  const Law::PropertyVector& in() const { return m_inputs; }
  
  const Law::PropertyVector& out() const { return m_outputs; }

  const Law::PropertyVector& parameters() const { return m_parameters; }

  bool isDifferentiable() const { return <#= (Law.differentiable) ? "true" : "false" #>; }
  
  void evaluate(const Law::VariableAccessor& accessor,            
                const Arcane::ItemGroup& group,
                const Law::eDerivative mode) const
  {
    if(not m_initialized) 
      fatal() << "<#= Law.name #> law is not initialized, call init() method before evaluation";
    m_evaluator->evaluate(accessor, group, mode);
  }
  
  void evaluate(const Law::PartialVariableAccessor& accessor,            
                const Arcane::ItemGroup& group,
                const Law::eDerivative mode) const
  {
    if(not m_initialized) 
      fatal() << "<#= Law.name #> law is not initialized, call init() method before evaluation";
    m_evaluator->evaluate(accessor, group, mode);
  }

  void evaluate(const Law::ArrayAccessor& accessor,            
                const Arcane::Integer& begin,
                const Arcane::Integer& end,
                const Law::eDerivative mode) const
  {
    if(not m_initialized) 
      fatal() << "<#= Law.name #> law is not initialized, call init() method before evaluation";
    m_evaluator->evaluate(accessor, begin, end, mode);
  }
 
private:
 
  bool m_initialized;

<# foreach(var p in All) { #>
  <#= p.PropertyType #> m_<#= p.Name #>;
<# } #> 
  
  Gump::Entity m_root;

  std::unique_ptr<Law::IEvaluator> m_evaluator;

  Law::PropertyVector m_inputs;
  Law::PropertyVector m_outputs;
  Law::PropertyVector m_parameters;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<typename T>
void
<#= Law.name #>LawObject::Evaluator<T>::
evaluate(const Law::VariableAccessor& accessor,
         const Arcane::ItemGroup& group,
         const Law::eDerivative mode) const
{
  switch(mode)
  {
  case Law::WithoutDerivative :
  {
<# foreach(var p in All) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# } #>
    ENUMERATE_ITEM(iitem, group) {
      m_algo.evaluate(<#= All.Select(e => e.Name + "[iitem]").Pack(",") #>);
    }
  }
  break;
  case Law::WithDerivative :
<# if(Law.differentiable == true) { #>
  {
<# foreach(var p in All) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# } 
  
   foreach(var p in Outputs) { #>
    auto& d<#= p.Name #> = accessor.derivatives(m_<#= p.Name #>);
<# } #>
    auto size = <#= static_size #><#= 
Inputs.Where(p => p.dimension == Dimension.vectorial)
      .Select(p => String.Format(" + m_{0}.size()", p.Name)).Pack() #>;
<# foreach(var p in Outputs.Where(p => p.dimension == Dimension.scalar)) { #>
    d<#= p.Name #>.resize(size);
<# }
   foreach(var p in Outputs.Where(p => p.dimension == Dimension.vectorial)) { #>
    d<#= p.Name #>.resize(m_<#= p.Name #>.size(), size);
<# } #>
    ENUMERATE_ITEM(iitem, group) {
      m_algo.evaluate(<#= 
         Inputs.Select(e => String.Format("{0}[iitem],", e.Name)).Pack() #><#= 
        Outputs.Select(e => String.Format("{0}[iitem],d{0}[iitem]", e.Name)).Pack(",") #><#= 
     Parameters.Select(e => String.Format(",{0}[iitem]", e.Name)).Pack() #>);
    }
  }
<# 
  } else { 
#>
    fatal() << "Law <#= Law.name #> is not differentiable";
<# 
  }
#>
  break;
  default:
    throw Arcane::FatalErrorException("evaluation case default error");
  }
}

/*---------------------------------------------------------------------------*/

template<typename T>
void
<#= Law.name #>LawObject::Evaluator<T>::
evaluate(const Law::PartialVariableAccessor& accessor,
         const Arcane::ItemGroup& group,
         const Law::eDerivative mode) const
{
  switch(mode)
  {
  case Law::WithoutDerivative :
  {
<# foreach(var p in All) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# } #>
    ENUMERATE_ITEM(iitem, group) {
      m_algo.evaluate(<#= All.Select(e => e.Name + "[iitem]").Pack(",") #>);
    }
  }
  break;
  case Law::WithDerivative :
<# if(Law.differentiable == true) { #>
  {
<# foreach(var p in All) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# } 
  
   foreach(var p in Outputs) { #>
    auto& d<#= p.Name #> = accessor.derivatives(m_<#= p.Name #>);
<# } #>
    auto size = <#= static_size #><#= 
Inputs.Where(p => p.dimension == Dimension.vectorial)
      .Select(p => String.Format(" + m_{0}.size()", p.Name)).Pack() #>;
<# foreach(var p in Outputs.Where(p => p.dimension == Dimension.scalar)) { #>
    d<#= p.Name #>.resize(size);
<# }
   foreach(var p in Outputs.Where(p => p.dimension == Dimension.vectorial)) { #>
    d<#= p.Name #>.resize(m_<#= p.Name #>.size(), size);
<# } #>
    ENUMERATE_ITEM(iitem, group) {
      m_algo.evaluate(<#= 
         Inputs.Select(e => String.Format("{0}[iitem],", e.Name)).Pack() #><#= 
        Outputs.Select(e => String.Format("{0}[iitem],d{0}[iitem]", e.Name)).Pack(",") #><#= 
     Parameters.Select(e => String.Format(",{0}[iitem]", e.Name)).Pack() #>);
    }
  }
<# 
  } else { 
#>
    fatal() << "Law <#= Law.name #> is not differentiable";
<# 
  }
#>
  break;
  default:
    throw Arcane::FatalErrorException("evaluation case default error");
  }
}

/*---------------------------------------------------------------------------*/

template<typename T>
void
<#= Law.name #>LawObject::Evaluator<T>::
evaluate(const Law::ArrayAccessor& accessor,
         const Arcane::Integer& begin,
         const Arcane::Integer& end,
         const Law::eDerivative mode) const
{
  switch(mode)
  {
  case Law::WithoutDerivative :
  {
<# foreach(var p in All) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# } #>
    for(int i = begin; i < end; ++i) {
      m_algo.evaluate(<#= All.Select(e => e.Name + "[i]").Pack(",") #>);
    }
  }
  break;
  case Law::WithDerivative :
<# if(Law.differentiable == true) { #>
  {
<# foreach(var p in all_properties) { #>
    auto& <#= p.Name #> = accessor.values(m_<#= p.Name #>);
<# }#>
<# foreach(var p in Outputs) { #>
    auto& d<#= p.Name #> = accessor.derivatives(m_<#= p.Name #>);
<# } #>
    auto size = <#= static_size #><#= 
Inputs.Where(p => p.dimension == Dimension.vectorial)
      .Select(p => String.Format(" + m_{0}.size()", p.Name)).Pack() #>;
<# foreach(var p in Outputs.Where(p => p.dimension == Dimension.scalar)) { #>
    d<#= p.Name #>.resize(d<#= p.Name #>.dim1Size(), size);
<# }
   foreach(var p in Outputs.Where(p => p.dimension == Dimension.vectorial)) { #>
    d<#= p.Name #>.resize(d<#= p.Name #>.dim1Size(), m_<#= p.Name #>.size(), size);
<# } #>
    for(int i = begin; i < end; ++i) {
      m_algo.evaluate(<#= 
         Inputs.Select(e => String.Format("{0}[i],", e.Name)).Pack() #><#= 
        Outputs.Select(e => String.Format("{0}[i],d{0}[i]", e.Name)).Pack(",") #><#= 
     Parameters.Select(e => String.Format(",{0}[i]", e.Name)).Pack() #>);
    }
  }
<# 
  } else { 
#>
    fatal() << "Law <#= Law.name #> is not differentiable";
<# 
  }
#>
  break;
  default:
    throw Arcane::FatalErrorException("evaluation case default error");
  }
}

/*---------------------------------------------------------------------------*/

void
<#= Law.name #>LawObject::
init(Gump::Entity root)
{
  if(m_initialized) return;
  
  m_root = root;
  
  configure();
  
  Gump::XPath<Gump::Property> xpath;
    
<# foreach(var p in Inputs) { #>
  if(m_<#= p.Name #>.uniqueId() == -1) {
    bool error = false;
    if(options()->properties.size() == 0 || 
       options()->properties[0].inputs.size() == 0 ||
       options()->properties[0].inputs[0].<#= p.ObjectName #>.size() == 0) {
      error = true;
    } else {
      auto& o = options()->properties[0].inputs[0].<#= p.ObjectName #>[0];
      auto& name = o.name;
      auto& id = o.id;
      auto& path = o.path;
      if(path.isPresent()) {
        if(name.isPresent() || id.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        if(m_root.empty()) {
          fatal() << "root entity is not defined";
        }
        auto p = xpath(m_root,path());
        m_<#= p.Name #> = p.cast<<#= p.PropertyType #>>();
      } else if(name.isPresent() && id.isPresent()) {
        if(path.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        m_<#= p.Name #> = <#= p.PropertyType #>(o.id(), o.name());
      } else {
        fatal() << "path or {name and id} of property <#= p.name #> are missing in .arc";
      }
    }
    if(error)
      fatal() << "Property <#= p.name #> is not initialized - use .arc or configure() method";
  }
  m_inputs << m_<#= p.Name #>;
<# } 

   foreach(var p in Outputs) { #>
  if(m_<#= p.Name #>.uniqueId() == -1) {
    bool error = false;
    if(options()->properties.size() == 0 || 
       options()->properties[0].outputs.size() == 0 ||
       options()->properties[0].outputs[0].<#= p.ObjectName #>.size() == 0) {
      error = true;
    } else {
      auto& o = options()->properties[0].outputs[0].<#= p.ObjectName #>[0];
      auto& name = o.name;
      auto& id = o.id;
      auto& path = o.path;
      if(path.isPresent()) {
        if(name.isPresent() || id.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        auto p = xpath(m_root,path());
        m_<#= p.Name #> = p.cast<<#= p.PropertyType #>>();
      } else if(name.isPresent() && id.isPresent()) {
        if(path.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        m_<#= p.Name #> = <#= p.PropertyType #>(o.id(), o.name());
      } else {
        fatal() << "path or {name and id} of property <#= p.name #> are missing in .arc";
      }
    }
    if(error)
      fatal() << "Property <#= p.name #> is not initialized - use .arc or configure() method";
  }
  m_outputs << m_<#= p.Name #>;
<# } 

   foreach(var p in Parameters) { #>
  if(m_<#= p.Name #>.uniqueId() == -1) {
    bool error = false;
    if(options()->properties.size() == 0 || 
       options()->properties[0].parameters.size() == 0 ||
       options()->properties[0].parameters[0].<#= p.ObjectName #>.size() == 0) {
      error = true;
    } else {
      auto& o = options()->properties[0].parameters[0].<#= p.ObjectName #>[0];
      auto& name = o.name;
      auto& id = o.id;
      auto& path = o.path;
      if(path.isPresent()) {
        if(name.isPresent() || id.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        auto p = xpath(m_root,path());
        m_<#= p.Name #> = p.cast<<#= p.PropertyType #>>();
      } else if(name.isPresent() && id.isPresent()) {
        if(path.isPresent()) {
          fatal() << "path, name and id of property <#= p.name #> are defined in .arc";
        }
        m_<#= p.Name #> = <#= p.PropertyType #>(o.id(), o.name());
      } else {
        fatal() << "path or {name and id} of property <#= p.name #> are missing in .arc";
      }
    }
    if(error)
      fatal() << "Property <#= p.name #> is not initialized - use .arc or configure() method";
  }
  m_parameters << m_<#= p.Name #>;
<# } #>  
  m_initialized = true;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_GENERATED_<#= Law.name.ToUpper() #>LAWOBJECT_H */
