<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump; 
var path = this.Session["path"] as string; 
var properties = gump.Properties ();
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_PROPERTYTRAITS_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_PROPERTYTRAITS_H

#include "<#= path #>/Properties/PropertyKind.h"

#include <arcane/utils/FatalErrorException.h>

namespace <#= gump.model.@namespace #> {

  template<ePropertyKind> struct PropertyTraits;
  
<#  
foreach(var property in properties) {
#>  template<> struct PropertyTraits<<#= property.Kind () #>>
  { 
    typedef <#= property.name #> type;
    
    Arcane::String toString() const { return "<#= property.name #>"; }
  };
  
<#  }#>

  struct PropertyKindConverter
  {
    Arcane::String operator()(ePropertyKind k) const
    {
      switch(k)
      {
<#  
foreach(var property in properties) {
#>
  case <#= property.Kind () #>: return "<#= property.name #>";
<# 
}
#>        default:
        throw Arcane::FatalErrorException("Property kind cast to string, error!");
      }
    }
      
    ePropertyKind operator()(Arcane::String s) const
    { 
<#  
foreach(var property in properties) {
#>
      if(s == "<#= property.name #>") return <#= property.Kind () #>;
<#
}
#> 
      return PK_UndefinedProperty;
    }
  };

}

#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_PROPERTYTRAITS_H */
