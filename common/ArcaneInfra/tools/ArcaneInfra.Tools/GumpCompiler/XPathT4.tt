<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump;
var path = this.Session["path"] as string; 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H

#include "ArcGeoSim/Gump/XPath.h"

#include "<#= path #>/Entities/EntityTraits.h"
#include "<#= path #>/Properties/PropertyTraits.h"

namespace <#= gump.model.@namespace #> {

  struct EntityConverter
  {
    static Arcane::Integer convert(Arcane::String s)
    {
      return EntityKindConverter()(s);
    }

    static Arcane::Integer undefined() { return EK_UndefinedEntity; };
  };

  struct PropertyConverter
  {
    static Arcane::Integer convert(Arcane::String s)
    {
      return PropertyKindConverter()(s);
    }

    static Arcane::Integer undefined() { return PK_UndefinedProperty; };
  };

  template<typename T> class XPath;

  template<>
  struct XPath<Gump::Entity>
  {
    Gump::Entity operator()(const Gump::Entity& entity, Arcane::String path) const
    {
      return Gump::searchEntity<EntityConverter>(entity, path);
    }
  };

  template<>
  struct XPath<Gump::Property>
  {
    Gump::Property operator()(const Gump::Entity& entity, Arcane::String path) const
    {
      return Gump::searchProperty<EntityConverter,PropertyConverter>(entity, path);
    }
  };

}

#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H */
