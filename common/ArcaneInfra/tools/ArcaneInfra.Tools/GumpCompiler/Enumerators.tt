<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump; 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENUMERATORS_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENUMERATORS_H

#include "ArcGeoSim/Gump/Enumerator.h"

namespace <#= gump.model.@namespace #> {
  template<typename> class EnumeratorT; 
}
<# 
foreach(var entity in gump.Entities ()) { 
#>

namespace <#= gump.model.@namespace #> {
  class <#= entity.name #>;
  typedef EnumeratorT<<#= entity.name #>> <#= entity.name #>Enumerator;
}

#define ENUMERATE_<#= entity.name.ToUpper() #>(e,enumerator) \
  for(<#= gump.model.@namespace #>::<#= entity.name #>Enumerator e = enumerator; \
      e.hasNext(); ++e)

#define ENUMERATE_SOME_<#= entity.name.ToUpper() #>(e,enumerator,predicat) \
  for(<#= gump.model.@namespace #>::<#= entity.name #>Enumerator e = enumerator; \
      e.hasNext(); ++e) if(not predicat) continue; else 
      
<#   
}
#>
#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENUMERATORS_H */
