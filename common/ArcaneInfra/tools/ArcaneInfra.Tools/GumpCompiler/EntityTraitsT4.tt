<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump;
var path = this.Session["path"] as string; 
var entities = gump.BaseEntities(); 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENTITYTRAITS_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENTITYTRAITS_H

#include "<#= path #>/Entities/EntityKind.h"

#include <arcane/utils/FatalErrorException.h>

namespace <#= gump.model.@namespace #> {

  template<eEntityKind> struct EntityTraits;
  
<#
foreach(var entity in entities) {
#>  template<> struct EntityTraits<<#= entity.Kind () #>>
  { 
    typedef <#= entity.name #> type;
    
    Arcane::String toString() const { return "<#= entity.name #>"; } 
  };
<#
}
#>

  struct EntityKindConverter
  {
    Arcane::String operator()(eEntityKind k) const
    {
      switch(k)
      {
<#
foreach(var entity in entities) {
#>        case <#= entity.Kind () #>: return "<#= entity.name #>";
<#
}
#>        default:
        throw Arcane::FatalErrorException("Property kind cast to string, error!");
      }
    }
  
    eEntityKind operator()(Arcane::String s) const
    {
<#  
foreach(var entity in entities) {
#>      if(s == "<#= entity.name #>") return <#= entity.Kind () #>;
<#
}
#> 
      return EK_UndefinedEntity;
    }
  };
  
}

#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_ENTITYTRAITS_H */
