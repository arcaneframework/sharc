<#@ template language="C#" #>
<#@ parameter name="n" type="System.Int32" #>
<#@ parameter name="m" type="System.Int32" #>
<#@ parameter name="commandline" type="System.String" #>
// -*- C++ -*-
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : <#=commandline#>
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ExpressionBuilderR<#=n#>vR<#=m#>Core.h"

#include "ExpressionBuilderR<#=n#>vR<#=m#>_axl.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"
#include "ArcGeoSim/Numerics/Expressions/ExpressionBuilder/LocalExpressionMng.h"
#include "ArcGeoSim/Numerics/Expressions/IExpressionMng.h"
#include "ArcGeoSim/Appli/IAppServiceMng.h"

#include <arcane/ArcaneVersion.h>
#include <arcane/utils/Array.h>
#include <arcane/utils/NotImplementedException.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ExpressionBuilderR<#=n#>vR<#=m#>Service
  : public ArcaneExpressionBuilderR<#=n#>vR<#=m#>Object
  , public ExpressionBuilderR<#=n#>vR<#=m#>Core
{
public:
  
  ExpressionBuilderR<#=n#>vR<#=m#>Service(const Arcane::ServiceBuildInfo & sbi) 
  : ArcaneExpressionBuilderR<#=n#>vR<#=m#>Object(sbi)
  , ExpressionBuilderR<#=n#>vR<#=m#>Core(new FunctionParser,true)
  , m_initialized(false) {}
  
  ~ExpressionBuilderR<#=n#>vR<#=m#>Service() {}

public:

  //! Initialisation
  void init();
  
  //! Point-wise evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "const Arcane::Real&", 
                             "Arcane::Real&", 
                             12) #>);

  //! Vector evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "const Arcane::Array<Arcane::Real>&", 
                             "Arcane::Array<Arcane::Real>&", 
                             12) #>);

  //! Vector evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "Arcane::RealConstArrayView", 
                             "Arcane::RealArrayView", 
                             12) #>);

<#if(m == 1) {#>
  //! Scalar return for point-wise evaluation
  Arcane::Real eval(<#= InRealSignatureNx1(n, 20) #>);
<#}#>

  //! Setting parameter
  void setParameter(const Arcane::String& name, 
                    const Arcane::Real & parameter);
  void setParameter(Arcane::Integer index, 
                    const Arcane::Real & parameter);
     
  //! Getting number of parameter
  Arcane::Integer getNbParameter() const;
  
  //! Getting name of variable
  Arcane::String getVariableName(Arcane::Integer index) const;
  
  //! Getting name of parameter
  Arcane::String getParameterName(Arcane::Integer index) const;
  
private:

  bool m_initialized;

  //! Local Expression Manager
  LocalExpressionMng m_expression_mng;
};

using namespace Arcane;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Service::
init()
{
  if (m_initialized) return;

  // Recherche de IExpressionMng
  IAppServiceMng* app_service_mng = IAppServiceMng::instance(subDomain()->serviceMng());
  IExpressionMng * expression_mng = app_service_mng->find<IExpressionMng>(false) ;

  // Initialisation du parser
  m_function_parser->init(expression_mng,&m_expression_mng,traceMng());
  
  // Lecture des constantes
  const Arcane::Integer nbConstant = options()->constant.size();
  for(Arcane::Integer iconstant=0; iconstant < nbConstant; ++iconstant) {
    m_expression_mng.setConstant(options()->constant[iconstant].name(),
                                 options()->constant[iconstant].value());
    info() << "Loading local constant " << options()->constant[iconstant].name();
  }

  // Parsing de l'expression
  m_function_parser->parseString(options()->expression());

  // Check expression coherency
  if(getOutDimension() != 1) { //interroger le parser, pour l'instant 1... 
    throw NotImplementedException("ExpressionBuilder cannot manage out dimension greater than 1");
  }
  
  m_initialized = true;
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Service::
eval(<#= SignatureNxM(n, m, 
                      "const Arcane::Real&", 
                      "Arcane::Real&", 
                      5) #>)
{
  if (!m_initialized) {
    fatal() << "ExpressionBuilderR<#=n#>vR<#=m#>Service not initialized";
  }
  
  ExpressionBuilderR<#=n#>vR<#=m#>Core::eval(<#= ArgumentsNxM(n, m, 35) #>);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Service::
eval(<#= SignatureNxM(n, m, 
                      "const Arcane::Array<Arcane::Real>&", 
                      "Arcane::Array<Arcane::Real>&", 
                      5) #>)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR<#=n#>vR<#=m#>Service not initialized";
    }
  
  ExpressionBuilderR<#=n#>vR<#=m#>Core::eval(<#= ArgumentsNxM(n, m, 35) #>);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Service::
eval(<#= SignatureNxM(n, m, 
                      "Arcane::RealConstArrayView", 
                      "Arcane::RealArrayView", 
                      5) #>)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR<#=n#>vR<#=m#>Service not initialized";
    }
  
  ExpressionBuilderR<#=n#>vR<#=m#>Core::eval(<#= ArgumentsNxM(n, m, 35) #>);
}

<#if(m == 1) {#>
/*---------------------------------------------------------------------------*/

Real
ExpressionBuilderR<#=n#>vR<#=m#>Service::
eval(<#= InRealSignatureNx1(n, 5) #>)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR<#=n#>vR<#=m#>Service not initialized";
    }
  
  return ExpressionBuilderR<#=n#>vR<#=m#>Core::eval(<#= InRealArgumentsNx1(n, 42) #>);
}
<#}#>

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Service::
setParameter(Arcane::Integer index,const Arcane::Real & value)
{
  Arcane::String name = m_function_parser->getParameter(index);

  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Service::
setParameter(const Arcane::String & name, const Arcane::Real & value)
{
  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR<#=n#>vR<#=m#>Service::
getNbParameter() const
{
  return m_function_parser->getNbParameter();
}

/*---------------------------------------------------------------------------*/

Arcane::String 
ExpressionBuilderR<#=n#>vR<#=m#>Service::
getVariableName(Arcane::Integer index) const
{
  return m_function_parser->getVariable(index);
}

/*---------------------------------------------------------------------------*/

Arcane::String
ExpressionBuilderR<#=n#>vR<#=m#>Service::
getParameterName(Arcane::Integer index) const
{
  return m_function_parser->getParameter(index);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_EXPRESSIONBUILDERR<#=n#>VR<#=m#>(ExpressionBuilderR<#=n#>vR<#=m#>,ExpressionBuilderR<#=n#>vR<#=m#>Service);
<#+
  private static string Indent(int count)
  {
    return "".PadLeft(count);
  }
  private string SignatureNxM(int n, int m, string in_arg, string out_arg, int padding)
  {
    int extra = in_arg.Length - out_arg.Length;
    string s = "";
    if(n > 0) { 
      s = String.Format("{0} var0,\n", in_arg); 
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}{1} var{2},\n", Indent(padding), in_arg, i);
    }
    for(int i = 0; i < m-1; ++i) {
      s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, i);
    } 
    s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, m-1);
    return s;
  }
  private string ArgumentsNxM(int n, int m, int padding)
  {
    string s = "";
    if(n > 0) { 
      s = "var0,\n"; 
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}var{1},\n", Indent(padding), i);
    }
    for(int i = 0; i < m-1; ++i) {
      s += String.Format("{0}res{1}", Indent(padding), i);
    } 
    s += String.Format("{0}res{1}", Indent(padding), m-1);
    return s;
  }
  private string InRealSignatureNx1(int n, int padding)
  {
    if(n == 1) { 
      return "const Arcane::Real& var0"; 
    }
    string s = "";
    if(n > 0) { 
      s = "const Arcane::Real& var0,\n"; 
    }
    for(int i = 1; i < n-1; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    if(n > 1) {
      s += String.Format("{0}const Arcane::Real& var{1}", Indent(padding), n-1);
    }
    return s;
  }
  private string InRealArgumentsNx1(int n, int padding)
  {
    if(n == 1) { 
      return "var0"; 
    }
    string s = "";
    if(n > 0) { 
      s = "var0,\n"; 
    }
    for(int i = 1; i < n-1; ++i) {
      s += String.Format("{0}var{1},\n", Indent(padding), i);
    }
    if(n > 1) {
      s += String.Format("{0}var{1}", Indent(padding), n-1);
    }
    return s;
  }
  private string DiffRealSignatureNx1(int n, int padding)
  {
    string s = "";
    if(n > 0) {
      s = String.Format("const Arcane::Real& var0,\n");
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    s += String.Format("{0}Arcane::Real& res0,\n", Indent(padding+6));
    for(int i = 0; i < n-1; ++i) {
      s += String.Format("{0}Arcane::Real& diffres{1},\n", Indent(padding+6), i);
    }
    s += String.Format("{0}Arcane::Real& diffres{1}", Indent(padding+6), n-1);
    return s;
  }
#>