<#@ template language="C#" #>
<#@ parameter name="n" type="System.Int32" #>
<#@ parameter name="m" type="System.Int32" #>		
<#@ parameter name="commandline" type="System.String" #>
// -*- C++ -*-
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : <#=commandline#>
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include <arcane/ArcaneVersion.h>
#include "ExpressionBuilderR<#=n#>vR<#=m#>Core.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ExpressionBuilderR<#=n#>vR<#=m#>Core::
ExpressionBuilderR<#=n#>vR<#=m#>Core(FunctionParser * function_parser,
                                 bool delegate_destroy)
 : m_function_parser(function_parser)
 , m_delegate_destroy(delegate_destroy) {}

/*---------------------------------------------------------------------------*/

ExpressionBuilderR<#=n#>vR<#=m#>Core::
 ~ExpressionBuilderR<#=n#>vR<#=m#>Core()
{
  if (m_delegate_destroy)
    delete m_function_parser;
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
init()
{
  // Do nothing
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setParameter(Arcane::Integer index,const Arcane::Real & value)
{
  Arcane::String name = m_function_parser->getParameter(index);

  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setParameter(const Arcane::String & name, const Arcane::Real & value)
{
  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR<#=n#>vR<#=m#>Core::
nbParameter() const
{
  return m_function_parser->getNbParameter();
}

/*---------------------------------------------------------------------------*/

Arcane::String
ExpressionBuilderR<#=n#>vR<#=m#>Core::
parameterName(Arcane::Integer index) const
{
  return m_function_parser->getParameter(index);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setVariable(Arcane::Integer index, const Arcane::Array<Arcane::Real> & variable)
{
  String name = m_function_parser->getVariable(index);
  m_function_parser->setVariable(name, variable.unguardedBasePointer(), variable.size());
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setVariable(const Arcane::String & name, const Arcane::Array<Arcane::Real> & variable)
{
  m_function_parser->setVariable(name, variable.unguardedBasePointer(), variable.size());
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR<#=n#>vR<#=m#>Core::
nbVariable() const
{
  return m_function_parser->getNbVariable();
}

/*---------------------------------------------------------------------------*/

Arcane::String 
ExpressionBuilderR<#=n#>vR<#=m#>Core::
variableName(Arcane::Integer index) const
{
  return m_function_parser->getVariable(index);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setEvaluationResult(Arcane::Array<Arcane::Real> & result)
{
  m_function_parser->setEvaluationResult(result.unguardedBasePointer(),result.size());
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setDerivationResult(Arcane::Integer di, Arcane::Array<Arcane::Real> & result) {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
setDerivationResult(const Arcane::String & di, Arcane::Array<Arcane::Real> & result) {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
eval() {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
cleanup() {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
eval(<#= SignatureNxM(n, m, 
                      "const Arcane::Real&", 
                      "Arcane::Real&", 
                      5) #>)

{
<# for(int i = 0; i < n; ++i) {#>
  const std::string var<#=i#>_name = m_function_parser->getVariable(<#=i#>);
  m_function_parser->setVariable(var<#=i#>_name, & var<#=i#>, 1);
<#}#>

<# for(int i = 0; i < m; ++i) {#>  m_function_parser->setEvaluationResult(& res<#=i#>, 1);
<#}#>

  m_function_parser->eval();
  m_function_parser->cleanup();
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
eval(<#= SignatureNxM(n, m, 
                      "const Arcane::Array<Arcane::Real>&", 
                      "Arcane::Array<Arcane::Real>&", 
                      5) #>)
{
<# for(int i = 0; i < n; ++i) {#>
  const std::string var<#=i#>_name = m_function_parser->getVariable(<#=i#>);
  m_function_parser->setVariable(var<#=i#>_name, var<#=i#>.unguardedBasePointer(), var<#=i#>.size());  
<#}#>

<# for(int i = 0; i < m; ++i) {#>  m_function_parser->setEvaluationResult(res<#=i#>.unguardedBasePointer(), res<#=i#>.size());
<#}#>

  m_function_parser->eval();
  m_function_parser->cleanup();
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR<#=n#>vR<#=m#>Core::
eval(<#= SignatureNxM(n, m, 
                      "Arcane::RealConstArrayView", 
                      "Arcane::RealArrayView", 
                      5) #>)
{
<# for(int i = 0; i < n; ++i) {#>
  const std::string var<#=i#>_name = m_function_parser->getVariable(<#=i#>);
  m_function_parser->setVariable(var<#=i#>_name, var<#=i#>.unguardedBasePointer(), var<#=i#>.size());  
<#}#>

<# for(int i = 0; i < m; ++i) {#>  m_function_parser->setEvaluationResult(res<#=i#>.unguardedBasePointer(), res<#=i#>.size());
<#}#>

  m_function_parser->eval();
  m_function_parser->cleanup();
}

<#if(m == 1) {#>
/*---------------------------------------------------------------------------*/

Arcane::Real
ExpressionBuilderR<#=n#>vR<#=m#>Core::
eval(<#= InRealSignatureNx1(n, 5) #>)
{
<# for(int i = 0; i < n; ++i) {#>
  const std::string var<#=i#>_name = m_function_parser->getVariable(<#=i#>);
  m_function_parser->setVariable(var<#=i#>_name, & var<#=i#>, 1);
<#}#>

  Arcane::Real res0;
  m_function_parser->setEvaluationResult(& res0, 1);

  m_function_parser->eval();
  m_function_parser->cleanup();

  return res0 ;
}
<#}#>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#+
  private static string Indent(int count)
  {
    return "".PadLeft(count);
  }
  private string SignatureNxM(int n, int m, string in_arg, string out_arg, int padding)
  {
    int extra = in_arg.Length - out_arg.Length;
    string s = "";
    if(n > 0) { 
      s = String.Format("{0} var0,\n", in_arg); 
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}{1} var{2},\n", Indent(padding), in_arg, i);
    }
    for(int i = 0; i < m-1; ++i) {
      s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, i);
    } 
    s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, m-1);
    return s;
  }
  private string InRealSignatureNx1(int n, int padding)
  {
    if(n == 1) { 
      return "const Arcane::Real& var0"; 
    }
    string s = "";
    if(n > 0) { 
      s = "const Arcane::Real& var0,\n"; 
    }
    for(int i = 1; i < n-1; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    if(n > 1) {
      s += String.Format("{0}const Arcane::Real& var{1}", Indent(padding), n-1);
    }
    return s;
  }
  private string DiffRealSignatureNx1(int n, int padding)
  {
    string s = "";
    if(n > 0) {
      s = String.Format("const Arcane::Real& var0,\n");
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    s += String.Format("{0}Arcane::Real& res0,\n", Indent(padding+6));
    for(int i = 0; i < n-1; ++i) {
      s += String.Format("{0}Arcane::Real& diffres{1},\n", Indent(padding+6), i);
    }
    s += String.Format("{0}Arcane::Real& diffres{1}", Indent(padding+6), n-1);
    return s;
  }
#>