<#@ template language="C#" #>
<#@ parameter name="n" type="System.Int32" #>
<#@ parameter name="m" type="System.Int32" #>
<#@ parameter name="commandline" type="System.String" #>
// -*- C++ -*-
#ifndef ARCGEOSIM_EXPRESSIONS_IFUNCTIONR<#=n#>VR<#=m#>_H
#define ARCGEOSIM_EXPRESSIONS_IFUNCTIONR<#=n#>VR<#=m#>_H

/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : <#=commandline#>
</autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include <arcane/ArcaneVersion.h>

#include "IIFunction.h"

#include <arcane/utils/UtilsTypes.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class IFunctionR<#=n#>vR<#=m#> : public IIFunction
{
public:
  
  IFunctionR<#=n#>vR<#=m#>() {}
  
  virtual ~IFunctionR<#=n#>vR<#=m#>() {}
  
public:

  //! Getting dimension of in-space
  Integer getInDimension() const { return <#=n#>; }
  
  //! Getting dimension of out-space
  Integer getOutDimension() const { return <#=m#>; }

  //! Point-wise evaluation
  /*! An optimized syntax will be introduce for single return evaluation 
   */
  virtual void eval(<#= SignatureNxM(n, m, 
                                     "const Arcane::Real&", 
                                     "Arcane::Real&", 
                                     20) #>) = 0;

  //! Vector evaluation
  virtual void eval(<#= SignatureNxM(n, m, 
                                     "const Arcane::Array<Arcane::Real>&", 
                                     "Arcane::Array<Arcane::Real>&", 
                                     20) #>) = 0;
  
  //! Vector evaluation
  virtual void eval(<#= SignatureNxM(n, m, 
                                     "Arcane::RealConstArrayView", 
                                     "Arcane::RealArrayView", 
                                     20) #>) = 0;

<#if(m == 1) {#><#if(n == 1 || n == 2) {#>
  //! Coupled function and derivative scalar evaluation (temporary: derivation handling in IFunction still to be defined)
  virtual void eval(<#= DiffRealSignatureNx1(n, 20) #>) = 0;
<#}#>
  
  //! Scalar return for point-wise evaluation
  virtual Arcane::Real eval(<#= InRealSignatureNx1(n, 28) #>) = 0;
<#if(n == 1) {#>

  //! Scalar return for point-wise derivation (temporary: derivation handling in IFunction still to be defined)
  virtual Real diffEval(const Arcane::Real& var0) = 0;
<#}#><#}#>

  //! Eval vectorized data service function
  virtual void eval() = 0;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_EXPRESSIONS_IFUNCTIONR<#=n#>VR<#=m#>_H */
<#+
  private static string Indent(int count)
  {
    return "".PadLeft(count);
  }
  private string SignatureNxM(int n, int m, string in_arg, string out_arg, int padding)
  {
    int extra = in_arg.Length - out_arg.Length;
    string s = "";
    if(n > 0) { 
      s = String.Format("{0} var0,\n", in_arg); 
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}{1} var{2},\n", Indent(padding), in_arg, i);
    }
    for(int i = 0; i < m-1; ++i) {
      s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, i);
    } 
    s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, m-1);
    return s;
  }
  private string InRealSignatureNx1(int n, int padding)
  {
    if(n == 1) { 
      return "const Arcane::Real& var0"; 
    }
    string s = "";
    if(n > 0) { 
      s = "const Arcane::Real& var0,\n"; 
    }
    for(int i = 1; i < n-1; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    if(n > 1) {
      s += String.Format("{0}const Arcane::Real& var{1}", Indent(padding), n-1);
    }
    return s;
  }
  private string DiffRealSignatureNx1(int n, int padding)
  {
    string s = "";
    if(n > 0) {
      s = String.Format("const Arcane::Real& var0,\n");
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    s += String.Format("{0}Arcane::Real& res0,\n", Indent(padding+6));
    for(int i = 0; i < n-1; ++i) {
      s += String.Format("{0}Arcane::Real& diffres{1},\n", Indent(padding+6), i);
    }
    s += String.Format("{0}Arcane::Real& diffres{1}", Indent(padding+6), n-1);
    return s;
  }
#>