<#@ template language="C#" #>
<#@ parameter name="n" type="System.Int32" #>
<#@ parameter name="m" type="System.Int32" #>
<#@ parameter name="commandline" type="System.String" #>
// -*- C++ -*-
#ifndef ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER<#=n#>VR<#=m#>CORE_H
#define ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER<#=n#>VR<#=m#>CORE_H

//*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : <#=commandline#>
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Numerics/Expressions/IFunctionR<#=n#>vR<#=m#>.h"

#include <arcane/ArcaneVersion.h>
#include <arcane/utils/Array.h>
#include <arcane/utils/TraceInfo.h>
 
#include <arcane/utils/NotImplementedException.h>

struct FunctionParser;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ExpressionBuilderR<#=n#>vR<#=m#>Core
  : public IFunctionR<#=n#>vR<#=m#>
{
public:
  ExpressionBuilderR<#=n#>vR<#=m#>Core(FunctionParser * function_parser,
                             bool delegate_destroy = false);

  virtual ~ExpressionBuilderR<#=n#>vR<#=m#>Core();

public:
  
  //@{ @name Methods from IIFunction

  //! Initialisation
  void init();
  
  //! Setting parameter
  void setParameter(const Arcane::String & name, const Arcane::Real & parameter);
  void setParameter(      Arcane::Integer index, const Arcane::Real & parameter);
  
  //! Getting number of parameter
  Arcane::Integer nbParameter() const;
  
  //! Getting name of parameter
  Arcane::String parameterName(Arcane::Integer index) const;

  //! Setting vectorized variable
  void setVariable(const Arcane::String & name, const Arcane::Array<Arcane::Real> & variable);
  void setVariable(      Arcane::Integer index, const Arcane::Array<Arcane::Real> & variable);
  
  //! Getting number of variable
  Arcane::Integer nbVariable() const;

  //! Getting name of variable
  Arcane::String variableName(Arcane::Integer index) const;

  //! Setting evaluation vectorized result
  void setEvaluationResult(Arcane::Array<Arcane::Real> & result);

  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(Arcane::Integer di, Arcane::Array<Arcane::Real> & result);
  
  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(const Arcane::String & di, Arcane::Array<Arcane::Real> & result);
  
  //! Eval vectorized data service function
  void eval();

  //! Cleanup
  void cleanup();

  //@}
  
  //@{ @name Local methods

  //! Point-wise evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "const Arcane::Real&", 
                             "Arcane::Real&", 
                             12) #>);

  //! Vector evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "const Arcane::Array<Arcane::Real>&", 
                             "Arcane::Array<Arcane::Real>&", 
                             12) #>);

  //! Vector evaluation
  void eval(<#= SignatureNxM(n, m, 
                             "Arcane::RealConstArrayView", 
                             "Arcane::RealArrayView", 
                             12) #>);
 <#if(m == 1) {#><#if(n == 1 || n == 2) {#>

  //! Coupled function and derivative scalar evaluation (temporary: derivation handling in IFunction still to be defined)
  void eval(<#= DiffRealSignatureNx1(n, 12) #>)
  {
    throw Arcane::NotImplementedException(A_FUNCINFO);
  }
<#}#>

  //! Scalar return for point-wise evaluation
  Arcane::Real eval(<#= InRealSignatureNx1(n, 20) #>);
<#if(n == 1) {#>

  //! Scalar return for point-wise derivation (temporary: derivation handling in IFunction still to be defined)
  Arcane::Real diffEval(const Arcane::Real& var0)
  {
    throw Arcane::NotImplementedException(A_FUNCINFO);
  }
<#}#><#}#>
  //@}

protected:
  //! Function parser
  FunctionParser * m_function_parser;

  //! Delegate destruction of FunctionParser
  bool m_delegate_destroy;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /*  ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER<#=n#>VR<#=m#>CORE_H */
<#+
  private static string Indent(int count)
  {
    return "".PadLeft(count);
  }
  private string SignatureNxM(int n, int m, string in_arg, string out_arg, int padding)
  {
    int extra = in_arg.Length - out_arg.Length;
    string s = "";
    if(n > 0) { 
      s = String.Format("{0} var0,\n", in_arg); 
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}{1} var{2},\n", Indent(padding), in_arg, i);
    }
    for(int i = 0; i < m-1; ++i) {
      s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, i);
    } 
    s += String.Format("{0}{1} res{2}", Indent(padding+extra), out_arg, m-1);
    return s;
  }
  private string InRealSignatureNx1(int n, int padding)
  {
    if(n == 1) { 
      return "const Arcane::Real& var0"; 
    }
    string s = "";
    if(n > 0) { 
      s = "const Arcane::Real& var0,\n"; 
    }
    for(int i = 1; i < n-1; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    if(n > 1) {
      s += String.Format("{0}const Arcane::Real& var{1}", Indent(padding), n-1);
    }
    return s;
  }
  private string DiffRealSignatureNx1(int n, int padding)
  {
    string s = "";
    if(n > 0) {
      s = String.Format("const Arcane::Real& var0,\n");
    }
    for(int i = 1; i < n; ++i) {
      s += String.Format("{0}const Arcane::Real& var{1},\n", Indent(padding), i);
    }
    s += String.Format("{0}Arcane::Real& res0,\n", Indent(padding+6));
    for(int i = 0; i < n-1; ++i) {
      s += String.Format("{0}Arcane::Real& diffres{1},\n", Indent(padding+6), i);
    }
    s += String.Format("{0}Arcane::Real& diffres{1}", Indent(padding+6), n-1);
    return s;
  }
#>
