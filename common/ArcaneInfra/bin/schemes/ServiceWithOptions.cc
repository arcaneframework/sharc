// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/* Author : ${AUTHOR}
 * Generated by ${CODE}
 */

/* INFO: Les services et modules se conforment maintenant a la politique Arcane core.
 *       L'emploi des .h etait fictif. 
 *       Desormais les declarations de classe pour les modules et services seront
 *       localisees dans le fichier .cc correspondant.
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

//#include "fullpath/I${name}.h"
class I${name} { };

struct ${name}Types {
  enum eChoix { Choix1, Choix2 };
};

#include "${name}_axl.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ${name}Service 
  : public Arcane${name}Object
{
public:

  /** Constructeur de la classe */
  ${name}Service(const Arcane::ServiceBuildInfo & sbi) 
    : Arcane${name}Object(sbi) {}
  
  /** Destructeur de la classe */
  ~${name}Service() {}
  
public:
  
  //! Initialisation
  void init();
  
  //! Apply service function
  void apply();
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
${name}Service::
init()
{
  ;
}

/*---------------------------------------------------------------------------*/

void 
${name}Service::
apply()
{
  ;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_${NAME}(${name},${name}Service);
