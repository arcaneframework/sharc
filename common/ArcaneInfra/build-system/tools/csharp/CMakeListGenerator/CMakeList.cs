// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CMakeListGenerator {
    using System.Linq;
    using System;
    
    
    public partial class CMakeList : CMakeListBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "CMakeList.tt"
            this.Write("#\n# Converted file for ");
            
            #line default
            #line hidden
            
            #line 4 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 4 "CMakeList.tt"
            this.Write(" library\n#\n\n");
            
            #line default
            #line hidden
            
            #line 7 "CMakeList.tt"
 if (Depend != null) { 
            
            #line default
            #line hidden
            
            #line 8 "CMakeList.tt"
            this.Write("# Required dependencies ");
            
            #line default
            #line hidden
            
            #line 8 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Depend ));
            
            #line default
            #line hidden
            
            #line 8 "CMakeList.tt"
            this.Write("\nif (");
            
            #line default
            #line hidden
            
            #line 9 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ConvertDependencies(Depend) ));
            
            #line default
            #line hidden
            
            #line 9 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 10 "CMakeList.tt"
 } 

	 if( ModuleFiles.Count() > 0 
      || AllServiceFiles.Count() > 0 
      || LawFiles.Count() > 0 
      || CFiles.Count() > 0 
      || CppFiles.Count() > 0 
      || CSharpFiles.Count() > 0) {

            
            #line default
            #line hidden
            
            #line 19 "CMakeList.tt"
            this.Write("#\n# Sources\n#\naddSources(");
            
            #line default
            #line hidden
            
            #line 22 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 22 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 23 "CMakeList.tt"
   foreach(var file in ModuleFiles) { 
            
            #line default
            #line hidden
            
            #line 24 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 24 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 24 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 24 "CMakeList.tt"
            this.Write("Module.cc\n");
            
            #line default
            #line hidden
            
            #line 25 "CMakeList.tt"
   } 
     foreach(var file in AllServiceFiles) { 
            
            #line default
            #line hidden
            
            #line 27 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 27 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 27 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 27 "CMakeList.tt"
            this.Write("Service.cc\n");
            
            #line default
            #line hidden
            
            #line 28 "CMakeList.tt"
   } 
     foreach(var file in CppFiles) { 
            
            #line default
            #line hidden
            
            #line 30 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 30 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 30 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 30 "CMakeList.tt"
            this.Write(".cc\n");
            
            #line default
            #line hidden
            
            #line 31 "CMakeList.tt"
   }
     foreach(var file in CFiles) { 
            
            #line default
            #line hidden
            
            #line 33 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 33 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 33 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 33 "CMakeList.tt"
            this.Write(".c\n");
            
            #line default
            #line hidden
            
            #line 34 "CMakeList.tt"
   }
     foreach(var file in CSharpFiles) { 
            
            #line default
            #line hidden
            
            #line 36 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 36 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 36 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 36 "CMakeList.tt"
            this.Write(".cs\n");
            
            #line default
            #line hidden
            
            #line 37 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 38 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 39 "CMakeList.tt"
 } 
   if (AxlFiles.Count() > 0) {

            
            #line default
            #line hidden
            
            #line 42 "CMakeList.tt"
            this.Write("    \n#\n# Axl files\n# \ngenerateAxl(");
            
            #line default
            #line hidden
            
            #line 46 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 46 "CMakeList.tt"
            this.Write("  \n");
            
            #line default
            #line hidden
            
            #line 47 "CMakeList.tt"
    
     foreach(var file in AxlFiles) { 
            
            #line default
            #line hidden
            
            #line 49 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 49 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 49 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 49 "CMakeList.tt"
            this.Write(".axl\n");
            
            #line default
            #line hidden
            
            #line 50 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 51 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 52 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 53 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 54 "CMakeList.tt"
 if (CaseAndStrongAxlFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 55 "CMakeList.tt"
            this.Write("    \ngenerateAxl(");
            
            #line default
            #line hidden
            
            #line 56 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 56 "CMakeList.tt"
            this.Write(" AXL_OPTION_GENERATION_MODE ALL\n");
            
            #line default
            #line hidden
            
            #line 57 "CMakeList.tt"
    
     foreach(var file in CaseAndStrongAxlFiles) { 
            
            #line default
            #line hidden
            
            #line 59 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 59 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 59 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 59 "CMakeList.tt"
            this.Write(".axl\n");
            
            #line default
            #line hidden
            
            #line 60 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 61 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 62 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 63 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 64 "CMakeList.tt"
 if (LawFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 65 "CMakeList.tt"
            this.Write("  \ngenerateLaw(");
            
            #line default
            #line hidden
            
            #line 66 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 66 "CMakeList.tt"
            this.Write(" \n");
            
            #line default
            #line hidden
            
            #line 67 "CMakeList.tt"
 
foreach(var file in LawFiles) { 
            
            #line default
            #line hidden
            
            #line 69 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 69 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 69 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 69 "CMakeList.tt"
            this.Write(".law\n");
            
            #line default
            #line hidden
            
            #line 70 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 71 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 72 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 73 "CMakeList.tt"
 if (LawDebugFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 74 "CMakeList.tt"
            this.Write("  \ngenerateLaw(");
            
            #line default
            #line hidden
            
            #line 75 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 75 "CMakeList.tt"
            this.Write(" DEBUG_MODE \n");
            
            #line default
            #line hidden
            
            #line 76 "CMakeList.tt"
 
foreach(var file in LawDebugFiles) { 
            
            #line default
            #line hidden
            
            #line 78 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 78 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 78 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 78 "CMakeList.tt"
            this.Write(".law\n");
            
            #line default
            #line hidden
            
            #line 79 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 80 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 81 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 82 "CMakeList.tt"
 if (LawSequentialFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 83 "CMakeList.tt"
            this.Write("  \ngenerateLaw(");
            
            #line default
            #line hidden
            
            #line 84 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 84 "CMakeList.tt"
            this.Write(" SEQUENTIAL_MODE \n");
            
            #line default
            #line hidden
            
            #line 85 "CMakeList.tt"
 
foreach(var file in LawSequentialFiles) { 
            
            #line default
            #line hidden
            
            #line 87 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 87 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 87 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 87 "CMakeList.tt"
            this.Write(".law\n");
            
            #line default
            #line hidden
            
            #line 88 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 89 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 90 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 91 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 92 "CMakeList.tt"
 if (GumpFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 93 "CMakeList.tt"
            this.Write("  \ngenerateGumpModel(\n");
            
            #line default
            #line hidden
            
            #line 95 "CMakeList.tt"
 
foreach(var file in GumpFiles) { 
            
            #line default
            #line hidden
            
            #line 97 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 97 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 97 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 97 "CMakeList.tt"
            this.Write(".gump\n");
            
            #line default
            #line hidden
            
            #line 98 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 99 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 100 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 101 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 102 "CMakeList.tt"
 if (StrongAxlFiles.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 103 "CMakeList.tt"
            this.Write("   \ngenerateAxl(");
            
            #line default
            #line hidden
            
            #line 104 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 104 "CMakeList.tt"
            this.Write(" AXL_OPTION_GENERATION_MODE STRONG_OPTIONS_ONLY\n");
            
            #line default
            #line hidden
            
            #line 105 "CMakeList.tt"
    
     foreach(var file in StrongAxlFiles) { 
            
            #line default
            #line hidden
            
            #line 107 "CMakeList.tt"
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 107 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SrcPath ));
            
            #line default
            #line hidden
            
            #line 107 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 107 "CMakeList.tt"
            this.Write(".axl\n");
            
            #line default
            #line hidden
            
            #line 108 "CMakeList.tt"
   } 
            
            #line default
            #line hidden
            
            #line 109 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 110 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 111 "CMakeList.tt"
            this.Write("\n\n\n");
            
            #line default
            #line hidden
            
            #line 114 "CMakeList.tt"
   if (Directories.Count () > 0) { 
            
            #line default
            #line hidden
            
            #line 115 "CMakeList.tt"
            this.Write(" \n#\n# Sub directories\n#\n");
            
            #line default
            #line hidden
            
            #line 119 "CMakeList.tt"
   foreach (var directory in Directories) {
       if (directory.depend != null) { 
            
            #line default
            #line hidden
            
            #line 121 "CMakeList.tt"
            this.Write("if (");
            
            #line default
            #line hidden
            
            #line 121 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ConvertDependencies(directory.depend) ));
            
            #line default
            #line hidden
            
            #line 121 "CMakeList.tt"
            this.Write(")\n  addDirectory(");
            
            #line default
            #line hidden
            
            #line 122 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( OutSrcPath ));
            
            #line default
            #line hidden
            
            #line 122 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( directory.Value ));
            
            #line default
            #line hidden
            
            #line 122 "CMakeList.tt"
            this.Write(")\nelse()\n  logStatus(\"${Yellow}Warning${ColourReset} Sub-directory '");
            
            #line default
            #line hidden
            
            #line 124 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( directory.Value ));
            
            #line default
            #line hidden
            
            #line 124 "CMakeList.tt"
            this.Write("' excluded as non-satisfied dependencies ");
            
            #line default
            #line hidden
            
            #line 124 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( directory.depend ));
            
            #line default
            #line hidden
            
            #line 124 "CMakeList.tt"
            this.Write("\")\nendif()\n");
            
            #line default
            #line hidden
            
            #line 126 "CMakeList.tt"
     } else { 
            
            #line default
            #line hidden
            
            #line 127 "CMakeList.tt"
            this.Write("addDirectory(");
            
            #line default
            #line hidden
            
            #line 127 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( OutSrcPath ));
            
            #line default
            #line hidden
            
            #line 127 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( directory.Value ));
            
            #line default
            #line hidden
            
            #line 127 "CMakeList.tt"
            this.Write(")\n");
            
            #line default
            #line hidden
            
            #line 128 "CMakeList.tt"
     } 
     }
   } 
            
            #line default
            #line hidden
            
            #line 131 "CMakeList.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 132 "CMakeList.tt"
 if (NeededPackages.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 133 "CMakeList.tt"
            this.Write("#\n# Target dependencies\n#\n");
            
            #line default
            #line hidden
            
            #line 136 "CMakeList.tt"
 foreach(var package in NeededPackages) {
  if (package.optional) { 
            
            #line default
            #line hidden
            
            #line 138 "CMakeList.tt"
            this.Write("if (TARGET ");
            
            #line default
            #line hidden
            
            #line 138 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.name ));
            
            #line default
            #line hidden
            
            #line 138 "CMakeList.tt"
            this.Write(")\n  linkLibraries(");
            
            #line default
            #line hidden
            
            #line 139 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 139 "CMakeList.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 139 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.name ));
            
            #line default
            #line hidden
            
            #line 139 "CMakeList.tt"
            this.Write(" )\nendif()\n");
            
            #line default
            #line hidden
            
            #line 141 "CMakeList.tt"
   } else { 
            
            #line default
            #line hidden
            
            #line 142 "CMakeList.tt"
            this.Write("linkLibraries(");
            
            #line default
            #line hidden
            
            #line 142 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LibraryName ));
            
            #line default
            #line hidden
            
            #line 142 "CMakeList.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 142 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.name ));
            
            #line default
            #line hidden
            
            #line 142 "CMakeList.tt"
            this.Write(" )\n");
            
            #line default
            #line hidden
            
            #line 143 "CMakeList.tt"
   }
   }
} 
        
if (Depend != null) { 
            
            #line default
            #line hidden
            
            #line 148 "CMakeList.tt"
            this.Write(" \n# End of required dependencies (");
            
            #line default
            #line hidden
            
            #line 149 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Depend ));
            
            #line default
            #line hidden
            
            #line 149 "CMakeList.tt"
            this.Write(")\nelse()\n  get_filename_component(dir ${CMAKE_CURRENT_LIST_DIR} NAME_WE)\n  logStatus(\"${Yellow}Warning${ColourReset} Sub-directory '${dir}' excluded as non-satisfied dependencies ");
            
            #line default
            #line hidden
            
            #line 152 "CMakeList.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Depend ));
            
            #line default
            #line hidden
            
            #line 152 "CMakeList.tt"
            this.Write("\")\nendif()\n");
            
            #line default
            #line hidden
            
            #line 154 "CMakeList.tt"
 } 
            
            #line default
            #line hidden
            
            #line 155 "CMakeList.tt"
            this.Write("\n#\n# End of converted file\n#\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        protected virtual void Initialize() {
        }
    }
    
    public class CMakeListBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((this.formatProvider == null)) {
                        throw new global::System.ArgumentNullException("formatProvider");
                    }
                    this.formatProvider = value;
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
