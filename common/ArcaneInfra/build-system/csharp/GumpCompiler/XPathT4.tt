<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump;
var path = this.Session["path"] as string; 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H

#include "ArcGeoSim/Physics/Gump/XPath.h"

#include "<#= path #>/Entities/EntityTraits.h"
#include "<#= path #>/Properties/PropertyTraits.h"

namespace <#= gump.model.@namespace #> {

  class XPath 
    : public Gump::IXPath
  {
  public:
  
    static Gump::Entity entity(Gump::Entity root, Arcane::String path)
    {
      return XPath(root).entity(path);
    }
    
    static Arcane::SharedArray<Gump::Entity> entities(Gump::Entity root, Arcane::String path)
    {
      return XPath(root).entities(path);
    }

    static Gump::ScalarRealProperty scalarRealProperty(Gump::Entity root, Arcane::String path)
    {
      return Gump::ScalarRealProperty(XPath(root).property(path));
    }

    static Gump::Property property(Gump::Entity root, Arcane::String path)
    {
      return XPath(root).property(path);
    }
    
    static Arcane::SharedArray<Gump::Property> properties(Gump::Entity root, Arcane::String path)
    {
      return XPath(root).properties(path);
    }
    
  public:
    
    XPath(Gump::Entity root)
      : m_root(root) {} 
                      
    Gump::Entity entity(Arcane::String path)
    {
      Gump::XPath<Gump::Entity> xpath;
      
      EntityKindConverter entity_converter; 
    
      return xpath(m_root, path, entity_converter);
    }
    
    Arcane::SharedArray<Gump::Entity> entities(Arcane::String path)
    {
      Gump::XPath<Gump::Entity> xpath;
      
      EntityKindConverter entity_converter; 
    
      return xpath.pack(m_root, path, entity_converter);
    }

    Gump::Property property(Arcane::String path)
    {
      Gump::XPath<Gump::Property> xpath;
    
      EntityKindConverter entity_converter; 
    
      PropertyKindConverter property_converter; 
    
      return xpath(m_root, path, entity_converter, property_converter);
    }
    
    Arcane::SharedArray<Gump::Property> properties(Arcane::String path)
    {
      Gump::XPath<Gump::Property> xpath;
    
      EntityKindConverter entity_converter; 
    
      PropertyKindConverter property_converter; 
    
      return xpath.pack(m_root, path, entity_converter, property_converter);
    }
    
  private:
  
    Gump::Entity m_root;
  };

}

#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_XPATH_H */
