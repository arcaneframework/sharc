<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<# 
var gump = this.Session["gump"] as gump;
//var path = this.Session["path"] as string; 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper()  #>_GENERATED_BY_GUMP_FACTORY_H
#define <#= gump.model.@namespace.ToUpper()  #>_GENERATED_BY_GUMP_FACTORY_H

#include "ArcGeoSim/Physics/Gump/Factory.h"

<#  
foreach(var entity in gump.Entities()) {
#>#include "<#= entity.name #>Builder.h"
<#  
} 
#>

namespace <#= gump.model.@namespace #> {

  class Factory : public Gump::Factory
  {
  public:

    Factory()
      : Gump::Factory(EK_NbEntities, ET_NbEntityTags, PK_NbProperties) {}

<#  
foreach(var entity in gump.Entities()) {
  var unique = entity.UniqueEntities(gump);
  if (unique.Count () == 0) { 
#>
    <#= entity.name #>Builder new<#= entity.name #>(Arcane::String name)
    {
      return create(name, <#= entity.Kind () #>, <#= entity.Tag () #>);
    }

<#   
  } else { 
#>
    <#= entity.name #>Builder new<#= entity.name #>(Arcane::String name,
<# 
    int i = 0;
    foreach(var e in unique) { 
#>
            const <#= e.name #>Builder& builder_<#= i++ #><# if (e != unique.Last ()) #>,
<# else #>) 
<#
    } 
#>
    {
      Gump::Builder builder = create(name, <#= entity.Kind () #>, <#= entity.Tag () #>);
<#
    i = 0; 
    foreach(var e in unique) { 
#>
      builder.push(builder_<#= i++ #>);
<#      
    } 
#>
      return builder;
    }

<#
  }
} 
#>
  };

}
#endif /* <#= gump.model.@namespace.ToUpper()  #>_GENERATED_BY_GUMP_FACTORY_H */
