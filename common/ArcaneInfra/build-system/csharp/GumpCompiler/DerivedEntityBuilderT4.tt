<#@ template language="C#" #>
<# 
var gump = this.Session["gump"] as gump;
var path = this.Session["path"] as string; 
var entity = this.Session["entity"] as Entity; 
#>
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by tool <#= GumpCompiler.Version.Name #> v<#= GumpCompiler.Version.Number #>.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#ifndef <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_<#= entity.name.ToUpper() #>BUILDER_H
#define <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_<#= entity.name.ToUpper() #>BUILDER_H

#include "<#= path #>/Builders/<#= entity.@base #>Builder.h"

<#
foreach(var e in entity.AllEntities(gump)) { 
#>
#include "<#= path #>/Builders/<#= e.name #>Builder.h"
<#
}
#>

namespace <#= gump.model.@namespace #> {

  struct <#= entity.name #>Builder : public <#= entity.@base #>Builder
  {
    <#= entity.name #>Builder() {}
    
    <#= entity.name #>Builder(const Gump::Builder& builder)
      : <#= entity.@base #>Builder(builder)
    {
<#  
foreach(var p in entity.supports) { 
#>
      push<Gump::e<#= p.Dim () #>,Arcane::<#= p.Type ()#>>("<#= p.name #>", <#= p.Kind () #>);
<#  
} 
#>
    }

<#  
foreach (var e in entity.MultipleEntities(gump)) {
#>
    <#= entity.name #>Builder& operator<<(const <#= e.name #>Builder& builder) 
    {
      push(builder);
      return *this;
    }
<#  
}
#>
  };

}

#endif /* <#= gump.model.@namespace.ToUpper() #>_GENERATED_BY_GUMP_<#= entity.name.ToUpper() #>BUILDER_H */
