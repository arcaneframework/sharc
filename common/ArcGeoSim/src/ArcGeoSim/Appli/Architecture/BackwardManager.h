// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_APPLI_ARCHITECTURE_BACKWARDMANAGER_H
#define ARCGEOSIM_ARCGEOSIM_APPLI_ARCHITECTURE_BACKWARDMANAGER_H
/* Author : desrozis at Wed Apr 21 01:30:15 2010
 * Generated by createNew
 */

#include "ArcGeoSim/Appli/ITimeLoopSnapshotManager.h"

#include <arcane/IBackwardMng.h>
#include <arcane/IDataReaderWriter.h>
#include <arcane/IVariableFilter.h>
#include <arcane/VariableCollection.h>
#include <arcane/utils/TraceAccessor.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class BackwardManager
  : public Arcane::IBackwardMng
  , public Arcane::TraceAccessor
{
private:

  class Filter;

  enum eSequence{ // Sauvegarde
                  SEQSave,
                  // Restauration
                  SEQRestore
  };

public:
  
  BackwardManager(Arcane::ISubDomain* sd);

  ~BackwardManager() { delete m_snapshots; }
  
public:

  // A virer de l'interface IBackwardMng ?
  void init() {}

  void beginAction();
  
  bool checkAndApplyRestore();
  
  bool checkAndApplySave(bool is_forced);

  void endAction();

  void setSavePeriod(Arcane::Integer n);
  
  Integer savePeriod() const;

  void goBackward();

  // NB : Jamais verrouille
  bool isLocked() const { return false; }

  bool isBackwardEnabled() const { return m_sequence == SEQRestore; }

  void clear();

private:

  void _save();

  void _restore();

  void _checkValidAction();
  
  void _checkSave(bool is_forced);

private:
  
  Arcane::ISubDomain* m_sub_domain;
  
  bool m_action_refused;

  eSequence m_sequence;

  ITimeLoopSnapshotManager* m_snapshots;

  Arcane::VariableCollection m_variables;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_APPLI_ARCHITECTURE_BACKWARDMANAGER_H */
