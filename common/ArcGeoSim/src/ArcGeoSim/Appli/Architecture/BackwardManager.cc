// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "BackwardManager.h"
/* Author : desrozis at Wed Apr 21 01:30:15 2010
 * Generated by createNew
 */

#ifdef WIN32
#include <ciso646>
#endif

#include "ArcGeoSim/Appli/Architecture/TimeLoopSnapshotManager.h"

#include "ArcGeoSim/Appli/AppService.h"

#include <arcane/IVariableFilter.h>
#include <arcane/IVariable.h>
#include <arcane/IVariableMng.h>
#include <arcane/ISubDomain.h>
#include <arcane/IParallelMng.h>
#include <arcane/CommonVariables.h>
#include <arcane/Timer.h>
#include <arcane/utils/ITraceMng.h>
#include <arcane/impl/MemoryDataReaderWriter.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ArcGeoSim::
BackwardManager::
BackwardManager(Arcane::ISubDomain* sd)
  : Arcane::TraceAccessor(sd->traceMng())
  , m_sub_domain(sd)
  , m_action_refused(true)
  , m_sequence(SEQSave)
  , m_snapshots(new TimeLoopSnapshotManager(m_sub_domain))
{
  ARCANE_ASSERT(m_sub_domain, ("Sub domain pointer null"));
  
  const Arcane::CommonVariables& variables = m_sub_domain->commonVariables(); 
  m_variables.add(variables.m_global_iteration.variable());
  m_variables.add(variables.m_global_time.variable());
  m_variables.add(variables.m_global_old_time.variable());
  m_variables.add(variables.m_global_old_deltat.variable());
  m_variables.add(variables.m_global_final_time.variable());
  
  // Enregistrement en partage
  MutableAppService<ITimeLoopSnapshotManager>() = m_snapshots;
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
setSavePeriod(Arcane::Integer n)
{
  if(n != 1) {
    warning() << "Set period not equals to one";
  }
}

/*---------------------------------------------------------------------------*/

Integer
ArcGeoSim::
BackwardManager::
savePeriod() const
{
  return 1;
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
clear()
{
  //ARCANE_ASSERT((m_data_io),("IDataReaderWriter pointer null"));

  //m_data_io->free();
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
goBackward()
{
  if(not m_action_refused) {
    pfatal() << "Attempting to go-backward during an action phase";
  }
  
  // Si deja en train de faire un retour arriere, on ne peut pas continuer
  if (m_sequence == SEQRestore) {
    pfatal() << "Go-backward already running";
  }

  m_sequence = SEQRestore;
}

/*---------------------------------------------------------------------------*/

void 
ArcGeoSim::
BackwardManager::
_checkValidAction()
{
  if(m_action_refused)
    throw Arcane::FatalErrorException(A_FUNCINFO,"Action requested outside the authorized period");
}

/*---------------------------------------------------------------------------*/

bool 
ArcGeoSim::
BackwardManager::
checkAndApplyRestore()
{
  _checkValidAction();
  if (m_sequence==SEQRestore){
    _restore();
    return true;
  }
  return false;
}

/*---------------------------------------------------------------------------*/
  
bool 
ArcGeoSim::
BackwardManager::
checkAndApplySave(bool is_forced)
{
  _checkValidAction();
  if (m_sequence==SEQSave){
    _save();
    return true;
  }
  return false;
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
beginAction()
{
  if(not m_action_refused) {
    fatal() << "Begin of an refused action";
  }
  
  m_action_refused = false;
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
endAction()
{
  if(m_action_refused) {
    pfatal() << "End of an refused action";
  }
  
  m_action_refused = true;

  m_sequence = SEQSave;
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
_restore()
{
  m_snapshots->restore();
}

/*---------------------------------------------------------------------------*/

void
ArcGeoSim::
BackwardManager::
_save()
{
  m_snapshots->save();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
