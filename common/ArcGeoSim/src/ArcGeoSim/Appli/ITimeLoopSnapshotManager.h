// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_ARCGEOSIM_APPLI_ITIMELOOPSNAPSHOTMANAGER_H
#define ARCGEOSIM_ARCGEOSIM_APPLI_ITIMELOOPSNAPSHOTMANAGER_H
/* Author : desrozis at Tue Oct 28 15:40:15 2014
 * Generated by createNew
 */

#include "ArcGeoSim/Utils/ArcGeoSim.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ITimeLoopSnapshotManager
{
public:
  
  virtual ~ITimeLoopSnapshotManager() {}
  
public:

  virtual void init() = 0;

  virtual void setVerbosity(bool verbosity) = 0;

  virtual bool verbosity() const = 0;
  
  //! Enregistrement par template car plus simple
  //! pour construire le clone
  template<typename T>
  void snap(T& v)
  {
    Arcane::VariableBuildInfo builder(v.variable()->mesh(), 
                                      _ownNamingRule(v.name()),
                                      Arcane::IVariable::PNoRestore);
    
    _snap(v.variable(), new T(builder), true);
  }
  
  template<typename T>
  void snap(T& v, T& snapshot)
  {
    _snap(v.variable(), new T(snapshot), true);
  }
  
  //! Accession du clone par template
  template<typename T>
  T snapshot(const T& v) const
  {    
    return T(_snapshot(v.variable()));
  }

  virtual void save() = 0;

  virtual void restore() = 0;

protected:

  //! Regle interne de nommage
  virtual Arcane::String _ownNamingRule(Arcane::String name) const = 0;

  //! Enregistrement interne
  virtual void _snap(Arcane::IVariable* v, Arcane::VariableRef* snapshot, bool is_own) = 0;

  //! Accession du clone
  virtual Arcane::IVariable* _snapshot(Arcane::IVariable* v) const = 0;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_APPLI_ITIMELOOPSNAPSHOTMANAGER_H */
