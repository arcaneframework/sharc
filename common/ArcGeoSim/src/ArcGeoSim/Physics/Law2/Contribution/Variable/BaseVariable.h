// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef LAW_CONTRIBUTION_BASEVARIABLE_H
#define LAW_CONTRIBUTION_BASEVARIABLE_H
/* Author : desrozis at Tue Nov 13 08:40:09 2012
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Law2/Contribution/Contribution.h"

//---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE
BEGIN_AUDI_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
#ifdef SPARSE_AUDI

class BaseVariable
{
public:

  BaseVariable():
    m_stencil_size(0)
    {}

  BaseVariable(const BaseVariable& rhs):
    m_stencil_size(rhs.m_stencil_size),
    m_ad_value(rhs.m_ad_value),
    m_unknowns_sparse(rhs.m_unknowns_sparse),
    m_unknowns_identity_derivatives_sparse(rhs.m_unknowns_identity_derivatives_sparse)
    {}

  BaseVariable(const SharedArray<Law::PropertyMapping>& offsets):
    m_stencil_size(offsets.size()-1),
    m_ad_value(m_stencil_size),
    m_unknowns_sparse(m_stencil_size),
    m_unknowns_identity_derivatives_sparse(m_stencil_size)
  {
    Arcane::Integer stencil_unknown_offset = 0;
    for(Arcane::Integer i = 0; i < m_stencil_size; ++i) {
      const Law::PropertyMapping map_prop = offsets[i+1];
      // Property is unknown derivatives is identity
      if(map_prop.propertyOffset()!=-1) {
        m_unknowns_sparse[i].resize(1);
        m_unknowns_sparse[i][0]= stencil_unknown_offset + map_prop.propertyOffset();
        m_unknowns_identity_derivatives_sparse[i].resize(1);
        m_unknowns_identity_derivatives_sparse[i][0]= 1.;
      }
      else {
        const Arcane::Integer sparse_size = map_prop.properties().size();
        m_unknowns_sparse[i].resize(sparse_size);
        Arcane::ConstArrayView<Arcane::Integer> unknown_offset = map_prop.userOffset();
        Arcane::ConstArrayView<Arcane::Integer> law_dependencies_offset = map_prop.referenceOffset();
        for(Arcane::Integer j = 0; j < sparse_size ; ++j) {
          m_unknowns_sparse[i][law_dependencies_offset[j]]= stencil_unknown_offset + unknown_offset[j];
        }
      }
      stencil_unknown_offset+=map_prop.userDependencies().dataSize();
    }
  }

  virtual ~BaseVariable() {}

public:

  Arcane::Integer stencilSize() const { return m_stencil_size; }

private:

  Arcane::Integer m_stencil_size;

protected:

  // const par design
  mutable Arcane::SharedArray<RootContribution> m_ad_value;

  Arcane::SharedArray<Arcane::IntegerSharedArray> m_unknowns_sparse;

  Arcane::SharedArray<Arcane::RealSharedArray> m_unknowns_identity_derivatives_sparse;

};
#else
class BaseVariable
{
public:

  BaseVariable():
    m_nb_derivatives(0),
    m_stencil_size(0) {}

  BaseVariable(const BaseVariable& rhs):
    m_nb_derivatives(rhs.m_nb_derivatives),
    m_stencil_size(rhs.m_stencil_size),
    m_ad_value(rhs.m_ad_value),
    m_unknowns_offsets(rhs.m_unknowns_offsets) {}

  BaseVariable(const SharedArray<Law::PropertyMapping>& offsets):
    m_nb_derivatives(-1),
    m_stencil_size(offsets.size()-1),
    m_ad_value(m_stencil_size),
    m_unknowns_offsets(m_stencil_size+1)
  {
    m_unknowns_offsets[0] = 0;
    for(Arcane::Integer i = 0; i < m_stencil_size; ++i) {
      Arcane::Integer size = offsets[i+1].userDependencies().dataSize();
      m_unknowns_offsets[i+1] = m_unknowns_offsets[i] + size;
    }
    m_nb_derivatives = m_unknowns_offsets.back();
    for(Arcane::Integer i = 0; i < m_stencil_size; ++i) {
      m_ad_value[i].resize(m_nb_derivatives);
    }
  }

  virtual ~BaseVariable() {}

public:

  Arcane::Integer stencilSize() const { return m_stencil_size; }

  Arcane::Integer dataSize() const { return m_nb_derivatives; }

private:

  Arcane::Integer m_nb_derivatives;
  Arcane::Integer m_stencil_size;

protected:

  // const par design
  mutable Arcane::SharedArray<Contribution> m_ad_value;

  Arcane::IntegerSharedArray m_unknowns_offsets;
};

#endif

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE
END_AUDI_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* LAW_CONTRIBUTION_BASEVARIABLE_H */
