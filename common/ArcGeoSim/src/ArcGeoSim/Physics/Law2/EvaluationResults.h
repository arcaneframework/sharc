// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_EVALUATIONRESULTS_H
#define ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_EVALUATIONRESULTS_H
/* Author : desrozis at Tue Nov 13 08:40:09 2012
 * Generated by createNew
 */

/*
 * \ingroup Law
 * \brief Outil permettant d'acc�der aux r�sultats d'�valuations de fonction
 *
 */
         
#include "ArcGeoSim/Physics/Law2/FunctionManager.h"
#include "ArcGeoSim/Physics/Law2/VariableManager.h"
#include "ArcGeoSim/Physics/Law2/BuildInfo.h"
#include "ArcGeoSim/Physics/Law2/PropertyMapping.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE
  
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*
 * \ingroup Law
 * \brief Classe permettant d'acc�der aux r�sultats d'�valuations de fonction
 *
 * \code
 *
 
 * \endcode
 *
 */

class EvaluationResults
{
public:

  EvaluationResults(const FunctionManager& f, 
                    const VariableManager& v);

  ~EvaluationResults() {}
  
public:
  
  EvaluationResults& operator<<(const Property& property);

  EvaluationResults& operator<<(const PropertyVector& properties);

  template<typename P>
  BuildInfo<P> operator[](const P& property) const
  {
    SharedArray<PropertyMapping> property_mappings = _createPropertyMappings(property);
    
    return BuildInfo<P>(m_variable_mng, property, property_mappings);
  }

  void setExtraDependencies(ConstArrayView<PropertyVector> extra_dependencies);
  
private:
  
  template<typename P>
  SharedArray<PropertyMapping> _createPropertyMappings(const P& property) const
  {
    const Integer size = m_extra_dependencies.size();
    
    PropertyVector dependencies = m_function_mng.dependencies(property);
    
    SharedArray<PropertyMapping> property_mappings(size + 1);
    
    if(m_user_dependencies.empty()) {
      property_mappings[0] = PropertyMapping(property, dependencies);
    } else {
      property_mappings[0] = PropertyMapping(property, m_user_dependencies, dependencies);
    }
    
    for(Integer i = 0;  i < size; ++i) {
      property_mappings[i+1] = PropertyMapping(property, m_extra_dependencies[i], dependencies);
    }

    return property_mappings;
  }

private:

  const FunctionManager& m_function_mng;
  const VariableManager& m_variable_mng;
  PropertyVector m_user_dependencies;
  SharedArray<PropertyVector> m_extra_dependencies;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_EVALUATIONRESULTS_H */
