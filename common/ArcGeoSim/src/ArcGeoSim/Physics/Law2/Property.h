// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_PROPERTY_H
#define ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_PROPERTY_H
/* Author : desrozis at Tue Oct 30 16:51:25 2012
 * Generated by createNew
 */

/*
 * \ingroup Law
 * \brief Proprietes physiques utilisees dans les outils lois.
 *
 * Decrit une propriete physique ayant :
 *   - un identifiant unique (a la charge de l'utilisateur)
 *   - un nom unique (a la charge de l'utilisateur)
 *   - une dimension (scalaire ou vectorielle)
 *   - une taille (1 en scalaire et fournie par l'utilisateur en vectoriel)
 *   - un type de donnee
 *
 * \code
 * ScalarRealProperty pressure(0,"Pressure");
 * VectorialRealProperty saturation(1,"Saturation",2); // taille 2
 * VectorialRealProperty composition(2,"Composition");
 * composition.initialize(3);
 * \endcode
 *
 * ATTENTION : il convient de definir son modele de donnees et de fixer les tailles
 * avant d'utiliser les outils lois
 *
 */

#include "ArcGeoSim/Physics/Law2/Dimension.h"

#include <arcane/utils/ValueConvert.h>
#include <arcane/VariableDataTypeTraits.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*!
 * \brief Classe generique de propriete 
 *
 * Utilisee pour le stockage
 *
 */
class Property
{
public:
  
  Property()
    : m_id(-1)
    , m_name("Unknown")
    , m_dim(eUndefined)
    , m_data_type(Arcane::DT_Unknown)
    , m_size(0) {} // Pour etre dans conteneurs STL ou Arcane
  
  virtual ~Property() {}

protected: 

  Property(Integer id, 
           String name, 
           Dimension dim, 
           Arcane::eDataType data_type,
           Integer size)
    : m_id(id)
    , m_name(name)
    , m_dim(dim)
    , m_data_type(data_type)
    , m_size(size) 
  {
    if(id < 0) throw Arcane::FatalErrorException("Property construction error : id < 0");
  }
 
public:
  
  //! Initialisation de la propriete (pour vectoriel)
  void initialize(Integer size) 
  {
    ARCANE_ASSERT((m_dim == eVectorial),("Scalar property mustn't be initialized"));
    if(m_size > 0) 
      throw Arcane::FatalErrorException("Property is already initialized");
    m_size = size;
  }

  //! Dimension de la propriete
  Dimension dimension() const { return m_dim; } 
  
  //! Type des donnees
  Arcane::eDataType dataType() const { return m_data_type; }
 
  //! Identifiant de la propriete
  Integer id() const { return m_id; }
  
  //! Name de la propriete
  const String& name() const { return m_name; }
  
  //! Taille de la proprietes 
  // ie 1 en scalaire, la taille du vecteur en vectoriel
  Integer size() const { return m_size; }

  //! Comparaison pour etre dans conteneurs tries STL
  bool operator<(const Property& p) const { return m_id < p.m_id; }

  //! Comparaison pour etre dans conteneurs tries STL
  bool operator!=(const Property& p) const { return m_id != p.m_id; }

  //! Teste si la propriete est definie
  bool isInitialized() const { return m_id >= 0 && m_size > 0; }

private:
  
  Integer m_id; 
  String m_name;
  Dimension m_dim;
  Arcane::eDataType m_data_type;

protected:
  
  bool m_is_parameter;
  Integer m_size;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*!
 * \brief Classe statique de propriete 
 *
 */
template<Dimension, typename> class PropertyT; 

/*!
 * \brief Propriete scalaire
 *
 */
template<typename T>
class PropertyT<eScalar,T> : public Property
{
public:
  
  PropertyT() {} // Pour etre dans les vecteurs fusions

  // Pour le static_cast
  PropertyT(const Property& prop)
   : Property(prop.id(), prop.name(), eScalar, Arcane::VariableDataTypeTraitsT<T>::type(), 1){}

  PropertyT(Integer id, String name)
    : Property(id, name, eScalar, Arcane::VariableDataTypeTraitsT<T>::type(), 1) {}

};

/*!
 * \brief Propriete vectorielle
 *
 */
template<typename T>
class PropertyT<eVectorial,T> : public Property
{
public:
  
  PropertyT() {} // Pour etre dans les vecteurs fusions
  
  // Pour le static_cast
  PropertyT(const Property& prop)
     : Property(prop.id(), prop.name(), eVectorial, Arcane::VariableDataTypeTraitsT<T>::type(), prop.size()){}

  PropertyT(Integer id, String name, Integer size = 0)
    : Property(id, name, eVectorial, Arcane::VariableDataTypeTraitsT<T>::type(), size) {}

};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// Types utilisateurs

typedef PropertyT<eScalar   ,Real   >       ScalarRealProperty;
typedef PropertyT<eVectorial,Real   >    VectorialRealProperty;
typedef PropertyT<eScalar   ,Integer>    ScalarIntegerProperty;
typedef PropertyT<eVectorial,Integer> VectorialIntegerProperty;
typedef PropertyT<eScalar   ,Byte   >    ScalarBooleanProperty;
typedef PropertyT<eVectorial,Byte   > VectorialBooleanProperty;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// Pour le debug

inline std::ostream& operator<<(std::ostream& nout, const Property& p)
{
  nout << "Property '" << p.name() 
       << "' {id=" << p.id() 
       << ",dim='" << p.dimension() 
       << "',type='" << p.dataType() 
       << "'}";
  if(p.dimension() == eVectorial)
    nout << "[size=" << p.size() << "]";
  
  return nout;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_PROPERTY_H */
