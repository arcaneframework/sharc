// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_VARIABLEDATABASE_H
#define ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_VARIABLEDATABASE_H
/* Author : desrozis at Fri Nov  9 12:26:54 2012
 * Generated by createNew
 */

/*
 * \ingroup Law
 * \brief Base de donnees de variables
 *
 * Un pointer VariableRef est stocke par variable. On indexe des variables sur le maillage
 * ainsi que des variables tableaux.
 *
 * Les variables sur maillage sont stockees par type de donnees, type d'item et partiel ou non
 *
 * Les variables tableaux sont stockees par type de donnees
 *
 */

#include "ArcGeoSim/Physics/Law2/VariableRef.h"

#include <map>
#include <list>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

inline bool operator<(const std::pair<Arcane::eItemKind,Arcane::eDataType>& a,
                      const std::pair<Arcane::eItemKind,Arcane::eDataType>& b)
{
  if(a.first == b.first)
    return a.second < b.second;
  else
    return a.first < b.first;
}

/*---------------------------------------------------------------------------*/

class VariableDataBase
{  
public:
  
  typedef std::pair<Arcane::eItemKind,Arcane::eDataType> Key;
  
  typedef std::list< std::shared_ptr<VariableRef> >::const_iterator const_iterator;
  
  typedef std::map<Key, std::shared_ptr<VariableRef> >::const_iterator map_iterator;
  
public:

  VariableDataBase() {}

  //! Enregistrement d'une variable
  void operator<<(std::shared_ptr<VariableRef> r)
  {
    ARCANE_ASSERT((r.get() != NULL),("VariableRef pointer null"));
    
    Key key = std::make_pair(r->itemKind(),r->dataType());
    
//     if(m_variables.find(key) != m_variables.end())
//       throw Arcane::FatalErrorException(String::format("Register multiple reference of property '{0}'",r->property().name()));
    
    m_variables.insert( std::make_pair(key, r) );
    
    m_variables_1D.push_back(r);
  }

  //! Accesseurs aux variables
  std::shared_ptr<VariableRef> reference(Arcane::eItemKind kind, Arcane::eDataType type) const
  {
    map_iterator it = m_variables.find( Key(kind,type) );

    ARCANE_ASSERT((it != m_variables.end()),("Try to access to an unregistered variable"));
    
    return it->second;
  }
  
  const_iterator begin() const { return m_variables_1D.begin(); }
  const_iterator end() const { return m_variables_1D.end(); }
  
private:
  
  std::map<Key, std::shared_ptr<VariableRef> > m_variables;

  std::list< std::shared_ptr<VariableRef> > m_variables_1D;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

inline std::ostream& operator<<(std::ostream& nout, const VariableDataBase& data) 
{
  for(VariableDataBase::const_iterator it = data.begin(); it != data.end(); ++it) {
    
    std::shared_ptr<VariableRef> ref = *it;
    
    nout << "\n - variable {kind='" << ref->itemKind() 
         << "',type='" << ref->dataType() << "',dim='" 
         << ref->property().dimension() << "'}";
    if(ref->hasDerivatives())
      nout << " with derivatives";
  }
  
  return nout;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_VARIABLEDATABASE_H */
