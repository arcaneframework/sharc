// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_IFUNCTION_H
#define ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_IFUNCTION_H
/* Author : desrozis at Tue Nov  6 14:11:49 2012
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Law2/VariableAccessor.h"
#include "ArcGeoSim/Physics/Law2/Derivative.h"
#include "ArcGeoSim/Physics/Law2/EvaluationMode.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*
 * \ingroup Law
 * \brief Interface de fonction pour les lois
 *
 * Utilis�e pour l'�valuation avec State et l'affichage 
 *
 */
class IFunction
{
public:
  
  virtual ~IFunction() {}
  
public:

  //! Identifiant unique de la fonction
  virtual Integer id() const = 0;

  //! Nom de la fonction correspondant au fichier signature .law
  virtual Arcane::String name() const = 0;

  //! Propri�t�s in
  virtual PropertyVector in() const = 0;
  
  //! Propri�t�s out
  virtual PropertyVector out() const = 0;

  //! Param�tres
  virtual PropertyVector parameters() const = 0;

  //! Test si la fonction est d�rivable
  virtual bool isDifferentiable() const = 0;

  //! Test si la fonction est un param�tre
  virtual bool isParameter() const = 0;

  //! Evaluation pour variables sur le maillage
  virtual void evaluate(const VariableAccessor& v,
                        const Arcane::ItemGroup& g, 
                        EvaluationMode mode, 
                        Arcane::Integer max_nb_unknowns = 0) const = 0;

  //! Evaluation pour variables partielles sur le maillage
  virtual void evaluate(const PartialVariableAccessor& v, 
                        const Arcane::ItemGroup& g,
                        EvaluationMode mode, 
                        Arcane::Integer max_nb_unknowns = 0) const = 0;

  //! Evaluation pour tableaux
  virtual void evaluate(const ArrayAccessor& v, 
                        const Arcane::Integer& begin,
                        const Arcane::Integer& end,
                        EvaluationMode mode, 
                        Arcane::Integer max_nb_unknowns = 0) const = 0;

  //! Evaluation pour scalaires
  virtual void evaluate(const ScalarAccessor& v,
      EvaluationMode mode,
      Arcane::Integer max_nb_unknowns = 0) const = 0;

  //! Correction des derivees pour variables sur le maillage
  virtual void derivativesCorrection(const VariableAccessor& v,
      const Arcane::ItemGroup& g,
      Law::PropertyVector graph_dependencies,
      std::map<Law::Property, Law::PropertyVector> in_composed_derivative_ofs,
	  Arcane::Integer nb_unknown_resize) const = 0;

  //! Correction des derivees pour variables partielles sur le maillage
  virtual void derivativesCorrection(const PartialVariableAccessor& v,
      const Arcane::ItemGroup& g,
      Law::PropertyVector graph_dependencies,
      std::map<Law::Property, Law::PropertyVector> in_composed_derivative_ofs,
	  Arcane::Integer nb_unknown_resize) const = 0;

  //! Correction des derivees pour tableaux
  virtual void derivativesCorrection(const ArrayAccessor& v,
      const Arcane::Integer& begin,
      const Arcane::Integer& end,
      Law::PropertyVector graph_dependencies,
      std::map<Law::Property, Law::PropertyVector> in_composed_derivative_ofs,
	  Arcane::Integer nb_unknown_resize) const = 0;

  //! Correction des derivees pour scalaires
  virtual void derivativesCorrection(const ScalarAccessor& v,
      Law::PropertyVector graph_dependencies,
      std::map<Law::Property, Law::PropertyVector> in_composed_derivative_ofs,
	  Arcane::Integer nb_unknown_resize) const = 0;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// Pour le debug
inline std::ostream& operator<<(std::ostream& nout, const IFunction& f) 
{
  if(f.isDifferentiable()) 
    nout << "-     (differentiable)";
  else 
    nout << "- (non-differentiable)";
  nout << " function[id=" << f.id() << "] : ";
  nout << " in = { ";
  for(Arcane::Integer i=0; i < f.in().size(); ++i)
    nout << f.in()[i].name() << " ";
  nout << "}, out = { ";
  for(Arcane::Integer i=0; i < f.out().size(); ++i)
    nout << f.out()[i].name() << " ";
  nout << "}, params = { ";
  for(Arcane::Integer i=0; i < f.parameters().size(); ++i)
    nout << f.parameters()[i].name() << " ";
  nout << "}";
  return nout;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_PHYSICS_LAW_IFUNCTION_H */
