// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_PHYSICS_LAW_VARIABLEMANAGER_H
#define ARCGEOSIM_PHYSICS_LAW_VARIABLEMANAGER_H
/* Author : desrozis at Fri Nov  9 09:49:32 2012
 * Generated by createNew
 */

/*
 * \ingroup Law
 * \brief Base de donnees de variables pour les lois
 *
 * Voir les fonctions de remplissage dans VariableAllocator.h
 *
 * \code
 *
 * VariableManager variable_mng(mesh());
 *
 * ScalarRealProperty Prop1(0,"Prop1");
 * VectorialRealProperty Prop2(4,"Prop5",2);
 * VectorialRealProperty Prop8(7,"Prop8",3);
 *
 * variable_mng << variable<Cell>(Prop1)
 *              << variable<Face>(Prop2)
 *              << array(Prop1)
 *              << array(Prop2);
 *                
 * info() << variable_mng;
 * 
 * \endcode
 *
 */

#include "ArcGeoSim/Physics/Law2/VariableAccessor.h"
#include "ArcGeoSim/Physics/Law2/VariableAllocator.h"

#include <arcane/utils/ITraceMng.h>
#include <arcane/IItemFamily.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*
 * \ingroup Law
 * \brief Classe de stockage des variables pour les lois
 *
 * Se base sur VariableDataBase et propose des accesseurs aux variables
 *
 */
class VariableManager
{
public:

  VariableManager(Arcane::IMesh* mesh);
  VariableManager(Arcane::IMesh* mesh, Arcane::ITraceMng* trace);
  VariableManager(Arcane::String name, Arcane::IMesh* mesh);
  VariableManager(Arcane::String name, Arcane::IMesh* mesh, Arcane::ITraceMng* trace);

  ~VariableManager() {}
  
public:
  
  void enableVerbosity() { m_verbose = true && (m_trace != NULL); }
  void disableVerbosity() { m_verbose = false; }

  Arcane::IMesh* mesh() const { return m_mesh; }

  void setDefaultFamily(Arcane::IItemFamily* family);
 
  //! Enregistrement par un allocateur
  VariableManager& operator<<(const std::shared_ptr<IAllocator>& info);
 
  //! Enregistrement d'une reference
  VariableManager& operator<<(const std::shared_ptr<VariableRef>& info);
  
  //! Accesseur de variable
  template<typename Kind>
  VariableAccessorT<Kind> variables() const 
  { 
    return VariableAccessorT<Kind>(m_variable);
  }
  
  //! Accesseur de variable partielle
  template<typename Kind>
  PartialVariableAccessorT<Kind> partialVariables() const
  {
    return PartialVariableAccessorT<Kind>(m_partial_variable);
  }
  
  //! Accesseur de variable tableau
  ArrayAccessor arrays() const
  {
    return ArrayAccessor(m_array);
  }
  
  //! Accesseur de variable scalaire
  ScalarAccessor scalars() const
  {
    return ScalarAccessor(m_scalar);
  }

private:
  
  void _check(const Accessor::DataBase& base, const Property& p) const;
  void _printRegisterInfo(const std::shared_ptr<VariableRef>& info) const;

private:
  
  Arcane::String m_name;
  Arcane::IMesh* m_mesh;
  Arcane::ITraceMng* m_trace;

  bool m_verbose;

  Accessor::DataBase m_variable;
  Accessor::DataBase m_partial_variable;
  Accessor::DataBase m_array;
  Accessor::DataBase m_scalar;

  std::map<Arcane::eItemKind,Arcane::String> m_default_family_name;
  
  friend std::ostream& operator<<(std::ostream& nout, const VariableManager& variable_mng);
};

/*---------------------------------------------------------------------------*/

#define PRINT_DATA_BASE(data_base)                                      \
  for(Accessor::DataBase::const_iterator it = variable_mng.data_base.begin(); \
      it != variable_mng.data_base.end(); ++it) {          \
    nout << "\nProperty['" << it->first.name() << "'] is registered with : " << it->second; \
  }

// Pour le debug
inline std::ostream& operator<<(std::ostream& nout, const VariableManager& variable_mng)
{
  nout << "Variable manager info :";

  nout << "\n------------------------------ Properties defined with mesh variable";
  PRINT_DATA_BASE(m_variable);
  
  nout << "\n------------------------------ Properties defined with mesh partial variable";
  PRINT_DATA_BASE(m_partial_variable);
  
  nout << "\n------------------------------ Properties defined with array";
  PRINT_DATA_BASE(m_array);
  
  nout << "\n------------------------------ Properties defined with scalar";
  PRINT_DATA_BASE(m_scalar);

  return nout;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_LAW_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_PHYSICS_LAW_VARIABLEMANAGER_H */
