// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_PHYSICS_GUMP_PACK_H
#define ARCGEOSIM_PHYSICS_GUMP_PACK_H
/* Author : desrozis at Fri Mar 27 08:53:38 2015
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Gump/Enumerator.h"

#include <boost/shared_ptr.hpp>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Gump {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<typename E, typename V>
class Pack
{
public:
  
  Pack(Arcane::SharedArray<std::shared_ptr<V>> variables, Arcane::SharedArray<E> entities)
    : m_variables(variables)
    , m_entities(entities) 
  {
    ARCANE_ASSERT((m_variables.size() == entities.size()),("array sizes are not equal"));
  }

  Pack(Arcane::SharedArray<std::shared_ptr<V>> variables, Arcane::SharedArray<Gump::Entity> entities)
    : m_variables(variables)
  {
    ARCANE_ASSERT((m_variables.size() == entities.size()),("array sizes are not equal"));

    for(auto e : entities)
      m_entities.add(E(e));
  }

  Pack(Arcane::SharedArray<std::shared_ptr<V>> variables, EnumeratorT<E> entities)
    : m_variables(variables)
  {
    ARCANE_ASSERT((m_variables.size() == entities.size()),("array sizes are not equal"));

    for(auto e : entities)
      m_entities.add(E(e));
  }

  ~Pack() {}
  
public:
  
  template<typename T>
  void fill(const T& t)
  {
    for(auto& v : m_variables) {
      if(v != nullptr) {
        v->fill(t);
      }
    }
  }

  const V& operator[](const E& entity) const
  {
    auto index = entity.familyId();
    ARCANE_ASSERT((m_entities[index] == entity),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

  const V& operator[](const Entity& entity) const
  {
    auto index = entity.familyId();
    ARCANE_ASSERT((m_entities[index] == entity),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

  const V& operator[](const EnumeratorT<E>& e) const
  {
    auto index = e->familyId();
    ARCANE_ASSERT((m_entities[index] == *e),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

  V& operator[](const E& entity)
  {
    auto index = entity.familyId();
    ARCANE_ASSERT((m_entities[index] == entity),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

  V& operator[](const Entity& entity)
  {
    auto index = entity.familyId();
    ARCANE_ASSERT((m_entities[index] == entity),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

  V& operator[](const EnumeratorT<E>& e)
  {
    auto index = e->familyId();
    ARCANE_ASSERT((m_entities[index] == *e),("Enumerator : entities are not same"));
    ARCANE_ASSERT((m_variables[index] != nullptr),("Enumerator : variable is null pointer"));
    return *(m_variables[index]);
  }

private:

  Arcane::SharedArray<std::shared_ptr<V>> m_variables;
  Arcane::SharedArray<E> m_entities;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_PHYSICS_GUMP_PACK_H */
