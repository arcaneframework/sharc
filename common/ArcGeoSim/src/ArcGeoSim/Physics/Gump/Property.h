// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_PHYSICS_GUMP_PROPERTY_H
#define ARCGEOSIM_PHYSICS_GUMP_PROPERTY_H
/* Author : desrozis at Mon Jun 29 16:05:37 2015
 * Generated by createNew
 */

#ifdef WIN32
#include <ciso646>
#endif

#include "ArcGeoSim/Physics/Gump/Entity.h"

#include <arcane/utils/ValueConvert.h>
#include <arcane/VariableDataTypeTraits.h>

#include "ArcGeoSim/Physics/Law2/Property.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Gump {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class Property
{
public:

  Property()
    : m_private(nullptr) {}

  Property(const Property& property)
    : m_private(property.m_private) {}

  Property(Arcane::Integer kind, const Entity& owner)
    : m_private(owner.property(kind))
  {
    ARCANE_ASSERT((_check()),("pointer null"));
  }

//   Property(Arcane::Integer id,
//            Arcane::String name,
//            Dimension dimension,
//            Arcane::eDataType data_type,
//            Arcane::Integer size)
//     : m_private(new Private::Property(name, id, dimension, data_type, size)) {}

public:

  const Arcane::String& name() const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return m_private->name();
  }

  const Arcane::String& fullName() const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return m_private->fullName();
  }

  Entity owner() const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return m_private->owner();
  }

  Arcane::Integer kind() const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return m_private->kind();
  }
    
  Arcane::Integer uniqueId() const
  {
    if(not _check()) {
      return -1;
    }
    return m_private->uniqueId();
  }

  bool operator==(const Property& p) const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return uniqueId() == p.uniqueId();
  }
      
  bool operator!=(const Property& p) const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return not this->operator==(p);
  }

  bool operator<(const Property& p) const
  {
    ARCANE_ASSERT((_check()),("pointer null"));
    return uniqueId() < p.uniqueId();
  }

  Property& operator=(const Property& property)
  {
    m_private = property.m_private;
    return *this;
  }

  Dimension dimension() const
  {
    return m_private->dimension();
  }

  Arcane::eDataType dataType() const
  {
    return m_private->dataType();
  }

  Arcane::Integer size() const
  {
    if(not _check()) {
      return -1;
    }
    return m_private->size();
  }

  template<typename T>
  T cast() const
  {
    return T(*this);
  }

  operator Law::ScalarRealProperty() const
  {
    return cast();
  }

  Law::ScalarRealProperty cast() const
  {
    return Law::ScalarRealProperty(uniqueId(),fullName());
  }

  // Pour la compatibilite avec Law
  Arcane::Integer id() const { return uniqueId(); }
  
  //! Teste si la propriete est definie
  bool isInitialized() const { return id() >= 0 && size() > 0; }

private:

  bool _check() const
  {
    return m_private != nullptr;
  }

private:

  Private::Property* m_private;
};

/*---------------------------------------------------------------------------*/

template<Dimension D, typename T>
class PropertyT;

template<typename T>
class PropertyT<eScalar,T>
  : public Property
{
public:

  PropertyT() {}

  PropertyT(const Property& property)
    : Property(property)
  {
    ARCANE_ASSERT((property.dimension() == eScalar),("dimension error"));
    ARCANE_ASSERT((property.dataType() == Arcane::VariableDataTypeTraitsT<T>::type()),
                  ("dimension error"));
  }

  PropertyT(const PropertyT<eScalar,T>& property)
    : Property(property) {}

  PropertyT(Arcane::Integer kind, const Entity& owner)
    : Property(kind, owner) {}

  operator Law::PropertyT<Law::eScalar,T>() const
  {
    return cast();
  }

  Law::PropertyT<Law::eScalar,T> cast() const
  {
    return  Law::PropertyT<Law::eScalar,T>(uniqueId(),fullName());
  }
};

template<typename T>
class PropertyT<eVectorial,T>
  : public Property
{
public:

  PropertyT() {}

  PropertyT(const Property& property)
    : Property(property)
  {
    ARCANE_ASSERT((property.dimension() == eVectorial),("dimension error"));
    ARCANE_ASSERT((property.dataType() == Arcane::VariableDataTypeTraitsT<T>::type()),
                  ("dimension error"));
  }

  PropertyT(const PropertyT<eVectorial,T>& property)
    : Property(property) {}

  PropertyT(Arcane::Integer kind, const Entity& owner)
    : Property(kind, owner) {}

  operator Law::PropertyT<Law::eVectorial,T>() const
  {
    return cast();
  }

  Law::PropertyT<Law::eVectorial,T> cast() const
  {
    return  Law::PropertyT<Law::eVectorial,T>(uniqueId(),fullName());
  }
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

typedef PropertyT<eScalar   , Arcane::Real   >       ScalarRealProperty;
typedef PropertyT<eVectorial, Arcane::Real   >    VectorialRealProperty;
typedef PropertyT<eScalar   , Arcane::Integer>    ScalarIntegerProperty;
typedef PropertyT<eVectorial, Arcane::Integer> VectorialIntegerProperty;
typedef PropertyT<eScalar   , Arcane::Byte   >    ScalarBooleanProperty;
typedef PropertyT<eVectorial, Arcane::Byte   > VectorialBooleanProperty;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_PHYSICS_GUMP_PROPERTY_H */
