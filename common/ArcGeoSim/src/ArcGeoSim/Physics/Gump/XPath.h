// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_PHYSICS_GUMP_XPATH_H
#define ARCGEOSIM_PHYSICS_GUMP_XPATH_H
/* Author : desrozis at Mon Jun 29 16:05:37 2015
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Gump/Entity.h"
#include "ArcGeoSim/Physics/Gump/Property.h"
#include "ArcGeoSim/Physics/Gump/IConverter.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Gump {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<typename T> class XPath;

template<>
struct XPath<Entity>
{
  Entity operator()(const Entity& entity, Arcane::String path) const;

  Entity operator()(const Entity& entity, Arcane::String path,
                    const IConverter& entity_converter) const;

  Arcane::SharedArray<Entity> pack(const Entity& entity, Arcane::String path,
                                   const IConverter& entity_converter) const;

  void debug(const Entity& entity) const;
};

/*---------------------------------------------------------------------------*/

template<>
struct XPath<Property>
{
  Property operator()(const Entity& entity, Arcane::String path) const;

  Property operator()(const Entity& entity, Arcane::String path,
                      const IConverter& entity_converter,
                      const IConverter& property_converter) const;

  Arcane::SharedArray<Property> pack(const Entity& entity, Arcane::String path,
                                     const IConverter& entity_converter,
                                     const IConverter& property_converter) const;

  void debug(const Entity& entity) const;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class IXPath
{
protected:

  IXPath() {}

public:

  virtual ~IXPath() {}

  virtual Gump::Entity entity(Arcane::String path) = 0;

  virtual Gump::Property property(Arcane::String path) = 0;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

std::shared_ptr<IXPath> makeDefaultXPath(Entity root);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_PHYSICS_GUMP_XPATH_H */
