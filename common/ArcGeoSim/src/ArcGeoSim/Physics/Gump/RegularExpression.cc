// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#include "RegularExpression.h"
/* Author : desrozis at Mon Jun 29 16:05:37 2015
 * Generated by createNew
 */

#include <boost/xpressive/xpressive.hpp>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Gump {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Arcane::SharedArray<Arcane::String> RegularExpression::operator()(Arcane::String s, Arcane::String expr) const
{
  Arcane::SharedArray<Arcane::String> values;

  boost::xpressive::smatch matches;

  const boost::xpressive::sregex reg =
    boost::xpressive::sregex::compile(expr.localstr());

  std::string local = s.localstr();

  if (boost::xpressive::regex_match(local, matches, reg)) {
    for (size_t i = 1; i < matches.size(); i++) {
      const std::string match = matches[i];
      values.add(match);
    }
  }

  return values;
}

/*---------------------------------------------------------------------------*/

bool ExpressionMatch::operator()(std::string s, std::string expr) const
{
  boost::xpressive::smatch matches;

  const boost::xpressive::sregex reg =
      boost::xpressive::sregex::compile(expr);

  return boost::xpressive::regex_match(s, matches, reg);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
