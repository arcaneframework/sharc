#ifndef DIVKGRADTWOPOINTSSERVICE_H
#define DIVKGRADTWOPOINTSSERVICE_H

#include <map>

#include <boost/shared_ptr.hpp>

#include "Geometry/IGeometryService.h"
#include "IDivKGradDiscreteOperator.h"

#include "DivKGradTwoPoints_axl.h"

using namespace Arcane;

/*!
  \class Two-points discretization of the \f$\nabla\cdot(\kappa \nabla\cdot)\f$
  operator
  \author Daniele A. Di Pietro
  \date 2007-08-03
*/
class DivKGradTwoPointsInnerBoundaryService : public ArcaneDivKGradTwoPointsObject {
 public:
  //! Constructor
  DivKGradTwoPointsInnerBoundaryService(const ServiceBuildInfo& sbi) :
    ArcaneDivKGradTwoPointsObject(sbi),
    m_geometry_service(NULL),
    m_initialized(false),
    m_prepared(false) {}

  //! Destructor
  virtual ~DivKGradTwoPointsInnerBoundaryService() {
    // Delete m_face group   
  }

  //! Return version number
  virtual VersionInfo versionInfo() const { return VersionInfo(1, 0, 0); }

 public:
  //! Initialize the service
  void init();

  //! Preliminary computations (including connectivity)
  void prepare(const FaceGroup& internal_faces,
	       const FaceGroup& boundary_faces,
	       FaceGroup& c_internal_faces,
	       FaceGroup& cf_internal_faces,
	       CoefficientArrayT<Cell>* cell_coefficients,
	       CoefficientArrayT<Face>* face_coefficients);

  //! Required cell geometric properties
  inline Integer getCellGeometricProperties() { 
    return IGeometryProperty::PCenter; 
  }
  //! Required face geometric properties
  inline Integer getFaceGeometricProperties() { 
    return (IGeometryProperty::PCenter | IGeometryProperty::PNormal); 
  }

  //! Form the discrete operator associated with the permeability \f$\kappa\f$
  void formDiscreteOperator(const AbsolutePermeabilityType& k);

 public:
  //! Return faces
  const FaceGroup& faces() const { return m_faces; }
  //! Return cells 
  const CellGroup& cells() const { return m_cells; }
  //! Return boundary faces
  const FaceGroup& boundaryFaces() const { return m_boundary_faces; }
  //! Return internal faces
  const FaceGroup& internalFaces() const { return m_internal_faces; }
  //! Return internal faces whose stencil contains cell unknowns only
  const FaceGroup& cInternalFaces() const { return m_c_internal_faces; }
  //! Return internal faces whose stencil contains both cells and face unknowns
  const FaceGroup& cfInternalFaces() const { return m_cf_internal_faces; }

 private:
  //! Geometry service
  IGeometryService* m_geometry_service;

  //! Initialized flag
  bool m_initialized;
  //! Prepared flag
  bool m_prepared;

  //! Faces group
  FaceGroup m_faces;
  //! Cells group
  CellGroup m_cells;
  //! Faces whose flux stencil contains cell unknowns only
  FaceGroup m_internal_faces;
  //! Boundary faces group
  FaceGroup m_boundary_faces;
  //! Internal faces whose stencil contains cell unknowns only
  FaceGroup m_c_internal_faces;
  //! Internal faces whose stencil contains both cells and face unknowns
  FaceGroup m_cf_internal_faces;

  //! Cell group name
  String m_cells_group_name;
  //! Face group name
  String m_faces_group_name;

  //! Cell coefficients
  CoefficientArrayT<Cell>* m_cell_coefficients;
  //! Face coefficients
  CoefficientArrayT<Face>* m_face_coefficients;

  // Object ownership, for backward compatibility only
  boost::shared_ptr<CoefficientArrayT<Cell> > m_cell_ownership;
  boost::shared_ptr<CoefficientArrayT<Face> > m_face_ownership;
  
  ItemGroupMapT<Cell,bool> m_is_interior ;
};

#endif
