// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef COORESARCANE_REACTIVETRANSPORT_GROUPCREATOR_STANDARDGROUPCREATORSERVICE_H
#define COORESARCANE_REACTIVETRANSPORT_GROUPCREATOR_STANDARDGROUPCREATORSERVICE_H
/* Author : haeberlf at Fri Feb 20 11:24:08 2009
 * Generated by createNew
 */

#include <arcane/IPostProcessorWriter.h>
#include "ArcGeoSim/Numerics/GroupCreator/IGroupCreator.h"

using namespace Arcane;

#include "StandardGroupCreator_axl.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"

#include <arcane/Timer.h>

class IGeometryMng;
class IExpressionMng;

class StandardGroupCreatorService :
  public ArcaneStandardGroupCreatorObject
{
public:
  /** Constructeur de la classe */
  StandardGroupCreatorService(const Arcane::ServiceBuildInfo & sbi) :
    ArcaneStandardGroupCreatorObject(sbi)
    , m_scalar_eval(true)
    , m_verbose(false)
    , m_filter_cell_tolerance(-1)
    , m_filter_face_tolerance(-1)
    , m_geometry_service(NULL)
    , m_expression_mng(NULL)
    , m_local_expression_mng(NULL)
    , m_unit_X(1.)
    , m_unit_Y(1.)
    , m_unit_Z(1.)
    , m_timer_groupcreator_filter(sbi.subDomain(),"StandardGroupCreatorService",Timer::TimerVirtual)
    , m_timer_groupcreator_build(sbi.subDomain(),"StandardGroupCreatorService",Timer::TimerVirtual)
    , m_timer_groupcreator_add(sbi.subDomain(),"StandardGroupCreatorService",Timer::TimerVirtual)
    , m_timer_groupcreator_create(sbi.subDomain(),"StandardGroupCreatorService",Timer::TimerVirtual)
  {
    ;
  }

  /** Destructeur de la classe */
  virtual ~StandardGroupCreatorService() {}

public:

  //! Initialisation
  void init();

  //! Geometric properties
  void prepare();

  //! Apply service function
  void apply();

private:

  void createAllBoundaryFacesGroup();
  void createCellGroups();
  void createFaceGroups();
  void create2DCellGroups();
  void create2DFaceGroups();
  void reportTimer();

  bool m_scalar_eval;
  bool m_verbose;

  Real m_filter_cell_tolerance;
  Real m_filter_face_tolerance;

  IGeometryMng * m_geometry_service;
    
  // Expression Manager + Function parser
  IExpressionMng * m_expression_mng;
  IExpressionMng * m_local_expression_mng;
  FunctionParser m_function_parser;

  //! unit factor
  Real m_unit_X ;
  Real m_unit_Y ;
  Real m_unit_Z ;
  
  Arcane::Timer m_timer_groupcreator_filter;
  Arcane::Timer m_timer_groupcreator_build;
  Arcane::Timer m_timer_groupcreator_add;
  Arcane::Timer m_timer_groupcreator_create;
};

#endif /* COORESARCANE_REACTIVETRANSPORT_GROUPCREATOR_STANDARDGROUPCREATORSERVICE_H */
