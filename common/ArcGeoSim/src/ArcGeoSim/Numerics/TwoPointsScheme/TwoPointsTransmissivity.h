// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_NUMERICS_FINITEVOLUME_TWOPOINTSTRANSMISSIVITY_H
#define ARCGEOSIM_NUMERICS_FINITEVOLUME_TWOPOINTSTRANSMISSIVITY_H
/* Author : desrozis at Wed Sep  4 10:21:36 2013
 * Generated by createNew
 */

#include "ArcGeoSim/Numerics/DiscreteOperator/IDivKGradDiscreteOperator.h"

#include <arcane/utils/TraceAccessor.h>

#include <map>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace ArcNum {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

enum eConvention { Classical, Canonical };

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class TwoPointsTransmissivity
  : public Arcane::TraceAccessor
{
public:

  class Transmissivity
  {
  public:
    Transmissivity(Arcane::IMesh* mesh, 
                   eConvention& convention,
                   Arcane::VariableFaceReal& transmissivity);
    const Arcane::VariableFaceReal& operator[](eConvention convention);
  private:
    void _transform();
  private:
    Arcane::IMesh* m_mesh; 
    eConvention& m_current_convention;
    Arcane::VariableFaceReal& m_transmissivity;
  };

public:
  
  TwoPointsTransmissivity();
  
  ~TwoPointsTransmissivity() {}
  
public:

  void enableVerboseMode();
  void disableVerboseMode();

  void addOperator(Arcane::String name, IDivKGradDiscreteOperator* discrete_operator);
  
  void computeOperator(Arcane::String name, Arcane::VariableCellReal& diffusion);
  void computeOperator(Arcane::String name, Arcane::VariableCellReal3& diffusion);
  void computeOperator(Arcane::String name, Arcane::VariableCellReal3x3& diffusion);

  Transmissivity operator[](Arcane::String name) const;

  Arcane::Integer maxStencilSize() const { return 2; }

private:

  void _allocateVariable(Arcane::String name);
  
  void _prepareOperator(Arcane::String name, 
                        IDivKGradDiscreteOperator* discrete_operator);
  
  void _formOperator(Arcane::String name, 
                     IDivKGradDiscreteOperator* discrete_operator, 
                     Arcane::VariableFaceReal& transmissivity,
                     Arcane::VariableCellReal& diffusion);
  
  void _formOperator(Arcane::String name,
                       IDivKGradDiscreteOperator* discrete_operator,
                       Arcane::VariableFaceReal& transmissivity,
                       Arcane::VariableCellReal3& diffusion);

  void _formOperator(Arcane::String name,
                         IDivKGradDiscreteOperator* discrete_operator,
                         Arcane::VariableFaceReal& transmissivity,
                         Arcane::VariableCellReal3x3& diffusion);

  void _recompute();

private:

  bool m_verbose;
  bool m_geometric_properties_computed;
  
  Arcane::IMesh* m_mesh;

  mutable eConvention m_current_convention;

  std::map<Arcane::String,IDivKGradDiscreteOperator*> m_operators;
  std::map<Arcane::String,std::shared_ptr<CoefficientArrayT<Arcane::Cell>>> m_cell_coefficients;
  std::map<Arcane::String,std::shared_ptr<CoefficientArrayT<Arcane::Face>>> m_face_coefficients;
  std::map<Arcane::String,Arcane::IVariable*> m_diffusion_variable;
  std::map<Arcane::String,Arcane::String> m_diffusion_type;
  mutable std::map<Arcane::String,std::shared_ptr<Arcane::VariableFaceReal>> m_transmissivities;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_NUMERICS_FINITEVOLUME_TWOPOINTSTRANSMISSIVITY_H */
