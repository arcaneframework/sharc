// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCNUM_NUMERICS_SOLVER_INONLINEARSYSTEM_H
#define ARCNUM_NUMERICS_SOLVER_INONLINEARSYSTEM_H
/* Author : desrozis at Thu Dec 10 08:56:08 2009
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Law2/Contribution/VariableFolder.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace ArcNum {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class Vector;
class Matrix;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<Law::ContainerKind::eType CK, Law::ItemKind::eType IK>
struct INonLinearOperator
{
  virtual ~INonLinearOperator() {}

  virtual const Law::PropertyVector& equationSystem() const = 0;

  virtual const Law::VariableFolder<CK,IK>& folder() const = 0;

  virtual void build(Vector& residual, Matrix& matrix) = 0;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class INonLinearSystem
  : public INonLinearOperator<Law::ContainerKind::Variable, Law::ItemKind::Cell>
{
public:

  struct IScalarEquation
    : public INonLinearOperator<Law::ContainerKind::Scalar, Law::ItemKind::None>
  {
    virtual ~IScalarEquation() {}

    virtual Arcane::Integer owner() const = 0;

    virtual Arcane::CellGroup interface() const = 0;

    virtual void newtonUpdateCallBack(Arcane::Real delta) = 0;

    virtual void build(Vector& residual, Matrix& matrix) = 0;

    /*virtual void build(ArcNum::Vector& residual,
                       ArcNum::Matrix& jacobian,
                       const Geoxim::Corrector& corrector) = 0;*/
  };

public:

  virtual ~INonLinearSystem() {}

  // Problemes couples
  virtual Arcane::SharedArray<IScalarEquation*> coupledProblems() const
  {
    return Arcane::SharedArray<IScalarEquation*>();
  }

  // Applique les contraintes sur la solution 
  // Par defaut, aucune
  virtual void applyConstraintOnSolution(bool &NonPhysicalSolution) {}

  // Mise a jour des termes explicites
  // Par defaut, ne fait rien (pour portage)
  virtual void updateExplicitTerms() {}

  // Formulation
  // Si la methode n'est pas surchargee, formulation a une equation
  /*virtual const IFormulation& formulation() const
  {
    m_default_formulation = OneEquationSystem(equationSystem());

    return m_default_formulation;
  }*/

private:

  //mutable OneEquationSystem m_default_formulation;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCNUM_NUMERICS_SOLVER_INONLINEARSYSTEM_H */
