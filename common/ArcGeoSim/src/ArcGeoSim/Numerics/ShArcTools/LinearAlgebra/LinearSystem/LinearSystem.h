// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCNUM_NUMERICS_SOLVER_LINEARSYSTEM_LINEARSYSTEM_H
#define ARCNUM_NUMERICS_SOLVER_LINEARSYSTEM_LINEARSYSTEM_H
/* Author : desrozis at Wed Mar  5 16:59:25 2014
 * Generated by createNew
 */

#include "ArcGeoSim/Utils/ArcGeoSim.h"
#include <alien/ref/AlienRefSemantic.h>
#include <alien/expression/solver/ILinearSolver.h>
#include <alien/arcane_tools/indexManager/SimpleAbstractFamily.h>
#include <alien/arcane_tools/indexSet/IndexSetFabric.h>
#include <alien/arcane_tools/data/Space.h>
#include <alien/arcane_tools/accessors/ItemVectorAccessor.h>
#include <alien/arcane_tools/IIndexManager.h>
#include <alien/arcane_tools/indexManager/BasicIndexManager.h>
#include <alien/arcane_tools/distribution/DistributionFabric.h>
#include <alien/arcane_tools/assembly_tools/LocalSystemContribution.h>
#ifdef ALIEN_USE_PETSC
#include <alien/kernels/petsc/io/AsciiDumper.h>
#endif

#include <arcane/ISubDomain.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

extern "C" Arcane::ISubDomain* _arcaneGetDefaultSubDomain();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace ArcNum {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class LinearSystem
{
public:
  
  // TODO  refactor avec ArcNum::EquationSystem
  struct Block
  {
    Block()
      : nbEquations(0)
      , name("") {}
    Arcane::String name;
    Arcane::Integer nbEquations;
  };

  struct MeshGroupBlock : public Block
  {
    Arcane::ItemGroup group;
    Arcane::IntegerSharedArray ellipticIndexes;
  };

public:

  LinearSystem();

  LinearSystem(const LinearSystem& system);

  // Cell
  LinearSystem(const MeshGroupBlock& groups,
               bool is_reduced);

  ~LinearSystem() {}

  LinearSystem& operator=(const LinearSystem& system);

public:

  Arcane::Integer size() const { return m_alien_space->size(); }

  const Alien::BlockMatrix& matrix() const { return *m_alien_matrix; }
  Alien::BlockMatrix& matrix() { return *m_alien_matrix; }
  const Alien::BlockVector& rhs() const { return *m_alien_rhs; }
  Alien::BlockVector& rhs() { return *m_alien_rhs; }
  const Alien::BlockVector& solution() const { return *m_alien_solution; }
  Alien::BlockVector& solution() { return *m_alien_solution; }
  const Alien::Block& block() const { return *m_alien_block; }
  Alien::Block& block() { return *m_alien_block; }
  const Alien::ArcaneTools::Space& space() const { return *m_alien_space; }
  Alien::ArcaneTools::Space& space() { return *m_alien_space; }
  const Alien::MatrixDistribution& matrixDistribution() const { return m_mdist; }
  Alien::MatrixDistribution& matrixDistribution() { return m_mdist; }
  const Alien::ArcaneTools::IIndexManager::VectorIndexSet indexSet() const { return m_alien_vector_index_set; }
  Arcane::ConstArray2View<Arcane::Integer> indexes() const { return m_alien_vector_indexes; }

  bool solve(Alien::ILinearSolver* solver);

  void dumpSolution(Arcane::String name);
  void dumpMatrix(std::string name);
  void dumpRhs(Arcane::String name);

  void dumpSolution();
  void dumpMatrix();
  void dumpRhs();

  bool withElimination() const { return 0; }

private:

  void _init(const MeshGroupBlock& group);

  void _prepareAlien();

private:

  Arcane::ITraceMng* m_trace;
  Alien::ArcaneTools::Space*             m_alien_space;
  std::shared_ptr<Alien::ArcaneTools::BasicIndexManager> m_alien_vector_index_manager;
  typedef Alien::ArcaneTools::IIndexManager::VectorIndexSet VectorIndexSet;
  VectorIndexSet m_alien_vector_index_set;
  Arcane::IntegerSharedArray2 m_alien_vector_indexes;
  Alien::MatrixDistribution m_mdist;
  Alien::VectorDistribution m_vdist;
  std::shared_ptr<Alien::Block> m_alien_block;
  std::shared_ptr<Alien::BlockVector> m_alien_rhs;
  std::shared_ptr<Alien::BlockVector> m_alien_solution;
  std::shared_ptr<Alien::BlockMatrix> m_alien_matrix;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCNUM_NUMERICS_SOLVER_LINEARSYSTEM_LINEARSYSTEM_H */
