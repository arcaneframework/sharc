// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "LinearSystem.h"
/* Author : desrozis at Wed Mar  5 16:59:25 2014
 * Generated by createNew
 */

#include <arcane/ISubDomain.h>
#include <alien/ref/AlienImportExport.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ArcNum::LinearSystem::
LinearSystem()
  : m_trace(_arcaneGetDefaultSubDomain()->traceMng())
  {}

/*---------------------------------------------------------------------------*/

ArcNum::LinearSystem::
LinearSystem(const LinearSystem& system)
  : m_trace(_arcaneGetDefaultSubDomain()->traceMng())
  , m_alien_space(system.m_alien_space)
  , m_alien_vector_index_manager(system.m_alien_vector_index_manager)
  , m_alien_vector_index_set(system.m_alien_vector_index_set)
  , m_alien_vector_indexes(system.m_alien_vector_indexes)
  , m_mdist(system.m_mdist)
  , m_vdist(system.m_vdist)
  , m_alien_block(system.m_alien_block)
  , m_alien_rhs(system.m_alien_rhs)
  , m_alien_solution(system.m_alien_solution)
  , m_alien_matrix(system.m_alien_matrix) {}

/*---------------------------------------------------------------------------*/

ArcNum::LinearSystem&
ArcNum::LinearSystem::
operator=(const LinearSystem& system)
{
  m_trace = _arcaneGetDefaultSubDomain()->traceMng();
  m_alien_space = system.m_alien_space;
  m_alien_vector_index_manager = system.m_alien_vector_index_manager;
  m_alien_vector_index_set = system.m_alien_vector_index_set;
  m_alien_vector_indexes = system.m_alien_vector_indexes;
  m_mdist = system.m_mdist;
  m_vdist = system.m_vdist;
  m_alien_block = system.m_alien_block;
  m_alien_rhs = system.m_alien_rhs;
  m_alien_solution = system.m_alien_solution;
  m_alien_matrix = system.m_alien_matrix;
  return *this;
}

/*---------------------------------------------------------------------------*/

ArcNum::LinearSystem::
LinearSystem(const MeshGroupBlock& group,
             bool is_reduced)
  : m_trace(_arcaneGetDefaultSubDomain()->traceMng())
  , m_alien_vector_index_manager(new Alien::ArcaneTools::BasicIndexManager(_arcaneGetDefaultSubDomain()->parallelMng()))
{
  this->_init(group);
}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
_init(const MeshGroupBlock& group)
{
  m_alien_vector_index_manager->setTraceMng(m_trace);

  m_alien_vector_index_set = m_alien_vector_index_manager->buildVectorIndexSet(group.name, group.group, group.nbEquations);
  m_alien_block.reset(new Alien::Block(group.nbEquations));

  m_alien_vector_index_manager->prepare();
  m_alien_vector_indexes.resize(m_alien_vector_index_set.size());
  m_alien_vector_indexes = m_alien_vector_index_manager->getIndexes(m_alien_vector_index_set);

  this->_prepareAlien();
}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
_prepareAlien()
{
  m_alien_space = new Alien::ArcaneTools::Space(m_alien_vector_index_manager.get(), m_alien_block->size());
  m_mdist = Alien::ArcaneTools::createMatrixDistribution(*m_alien_space, m_alien_block->size());
  m_vdist = Alien::ArcaneTools::createVectorDistribution(*m_alien_space, m_alien_block->size());

  m_alien_rhs.reset(new Alien::BlockVector(*m_alien_block, m_vdist));
  m_alien_solution.reset(new Alien::BlockVector(*m_alien_block, m_vdist));
  m_alien_matrix.reset(new Alien::BlockMatrix(*m_alien_block, m_mdist));
}

/*---------------------------------------------------------------------------*/

Alien::SolverStatus
ArcNum::LinearSystem::
solve(Alien::ILinearSolver* solver)
{
  try
  {
    bool succeed = solver->solve(*m_alien_matrix,
                                 *m_alien_rhs,
                                 *m_alien_solution);

    const auto& status = solver->getStatus();

    assert(succeed==status.succeeded);

    return status;
  }
  catch(...)
  {
    return solver->getStatus();
  }
}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpSolution(Arcane::String name)
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(name, *m_alien_solution);
  std::cout<<"with the actual system writer use juste dumpMartix fuction to dump the matrix and the rhs";
}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpMatrix(std::string name)
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(name, *m_alien_matrix);
  Alien::SystemWriter writer(name,"ascii",_arcaneGetDefaultSubDomain()->parallelMng()->messagePassingMng()) ;
  writer.dump(*m_alien_matrix, *m_alien_rhs) ;

}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpRhs(Arcane::String name)
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(name, *m_alien_rhs);
  std::cout<<"with the actual system writer use juste dumpMartix(std::string) fuction to dump the matrix and the rhs";

}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpSolution()
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(*m_alien_solution);
  std::cout<<"with the actual system writer use juste dumpMartix fuction to dump the matrix and the rhs";

}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpMatrix()
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(*m_alien_matrix);
  std::cout<<"with the actual system writer use juste dumpMartix(std::string) fuction to dump the matrix and the rhs";

}

/*---------------------------------------------------------------------------*/

void
ArcNum::LinearSystem::
dumpRhs()
{
  //Alien::AsciiDumper dumper(Alien::AsciiDumper::eMatlabStyle);
  //dumper.dump(*m_alien_rhs);
  std::cout<<"with the actual system writer use juste dumpMartix(std::string) fuction to dump the matrix and the rhs";

}

/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
