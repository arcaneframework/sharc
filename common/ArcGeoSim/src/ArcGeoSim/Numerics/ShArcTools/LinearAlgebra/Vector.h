// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCNUM_NUMERICS_SOLVER_VECTOR_H
#define ARCNUM_NUMERICS_SOLVER_VECTOR_H
/* Author : desrozis at Tue Aug 28 08:35:42 2012
 * Generated by createNew
 */

#include "ArcGeoSim/Physics/Law2/Contribution/Contribution.h"

#include <arcane/ISubDomain.h>

#include <alien/ref/data/block/BlockVector.h>
#include <alien/ref/handlers/block/BlockVectorWriter.h>
#include <alien/ref/handlers/block/BlockVectorReader.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

extern "C" Arcane::ISubDomain* _arcaneGetDefaultSubDomain();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace ArcNum {

  /*---------------------------------------------------------------------------*/
  /*---------------------------------------------------------------------------*/

  class Vector
  {
    struct InternalData
    { 
      InternalData(Alien::BlockVector& alien_block_vector,
		   Arcane::ConstArray2View<Arcane::Integer> all_indexes)
	: m_trace(_arcaneGetDefaultSubDomain()->traceMng())
	, m_i(-1)
	, m_equation(-1)
	, m_alien_block_vector(alien_block_vector)
	, m_all_indexes(all_indexes) {}
    Arcane::ITraceMng* m_trace;
    Arcane::Integer m_i;
    Arcane::Integer m_equation;
    Alien::BlockVector& m_alien_block_vector;
    Arcane::ConstArray2View<Arcane::Integer> m_all_indexes;
  };
  
public:
  
  struct VectorAdder
  {
    VectorAdder(InternalData& data)
      : m_data(data) {}
    
    void operator+=(const Arcane::Real& value) 
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = vw[m_data.m_i][m_data.m_equation] + value;
    }
    
    void operator-=(const Arcane::Real& value) 
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = vw[m_data.m_i][m_data.m_equation] - value;
    }
    
    void operator=(const Arcane::Real& value) 
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = value;
    }

    void operator+=(const Law::Contribution& array)
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = vw[m_data.m_i][m_data.m_equation] + array.value();
    }

    void operator-=(const Law::Contribution& array)
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = vw[m_data.m_i][m_data.m_equation] - array.value();
    }

    void operator =(const Law::Contribution& array)
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw[m_data.m_i][m_data.m_equation] = array.value();
    }

    operator const Arcane::Real&() const 
    {
      Alien::BlockVectorReader vr(m_data.m_alien_block_vector);
      return vr[m_data.m_i][m_data.m_equation];
    }

    InternalData& m_data;
  };
  
  class VectorElementProxy 
  {
  public:
    
    VectorElementProxy(InternalData& data)
      : m_data(data) {}
    
    VectorAdder operator[](const Arcane::Item& i) 
    {
      m_data.m_i = m_data.m_all_indexes[i.localId()][0]/m_data.m_alien_block_vector.block().size();
      return VectorAdder(m_data);
    }
    
    VectorAdder operator[](const Arcane::ItemEnumerator& i) 
    {
      m_data.m_i = m_data.m_all_indexes[i->localId()][0]/m_data.m_alien_block_vector.block().size();
      return VectorAdder(m_data);
    }
   
    VectorAdder operator[](const Law::Cell& i)
    {
      m_data.m_i = m_data.m_all_indexes[i.localId()][0]/m_data.m_alien_block_vector.block().size();
      return VectorAdder(m_data);
    }
   
  private:
    
    InternalData& m_data;
  };
  Vector(Alien::BlockVector& alien_block_vector,
	 Arcane::ConstArray2View<Arcane::Integer> indexes)
    : m_data(alien_block_vector, indexes) {}

  VectorElementProxy operator[](Arcane::Integer equation)
  {
    m_data.m_equation = equation;
    return VectorElementProxy(m_data);
  }

  Vector& operator=(Arcane::Real v)
  {
    {
      Alien::BlockVectorWriter vw(m_data.m_alien_block_vector);
      vw = v;
    }
    return *this;
  }

  const Alien::BlockVector& block() const
  {
    return m_data.m_alien_block_vector;
  }

private:
  
  InternalData m_data;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCNUM_NUMERICS_SOLVER_VECTOR_H */
