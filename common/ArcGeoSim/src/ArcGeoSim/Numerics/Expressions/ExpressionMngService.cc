// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "ExpressionMngService.h"
/* Author : havep at Thu Oct 30 14:00:38 2008
 * Generated by createNew
 */

using namespace Arcane;

#include "IFunction.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
ExpressionMngService::
init()
{
  const Integer nbConstant = options()->constant.size();
  for(Integer iconstant=0; iconstant < nbConstant; ++iconstant)
    {
      const CaseOptionsExpressionMng::CaseOptionConstantTypeValue & constant = options()->constant[iconstant];
      m_constant_table[constant.name()] = constant.value();
      info() << "Loading constant " << constant.name();
    }

  const Integer nbFunction = options()->function.size();
  for(Integer ifunction=0; ifunction < nbFunction; ++ifunction)
    {
      const CaseOptionsExpressionMng::CaseOptionFunctionTypeValue & function = options()->function[ifunction];
      m_function_table[function.name()] = function.value();
      info() << "Loading function " << function.name();
    }
}

/*---------------------------------------------------------------------------*/

Real
ExpressionMngService::
constant(const String & name) const
{
  const Real * candidate = constantLookup(name);
  if (candidate) return *candidate;
  else {
    String msg = String("Constant '")+ name + String("' undefined in ExpressionMng");
    throw FatalErrorException(A_FUNCINFO,msg);
  }
}

/*---------------------------------------------------------------------------*/

const Real *
ExpressionMngService::
constantLookup(const String & name) const
{
  ConstantTable::const_iterator ifinder = m_constant_table.find(name);
  if (ifinder == m_constant_table.end()) return NULL;
  else return &ifinder->second;
}

/*---------------------------------------------------------------------------*/

IFunction *
ExpressionMngService::
function(const String & name) const
{
  FunctionTable::const_iterator ifinder = m_function_table.find(name);
  if (ifinder == m_function_table.end()) return NULL;
  else return ifinder->second;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_EXPRESSIONMNG(ExpressionMng,ExpressionMngService);
