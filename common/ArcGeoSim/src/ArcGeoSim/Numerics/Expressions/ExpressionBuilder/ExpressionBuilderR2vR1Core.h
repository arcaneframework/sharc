// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER2VR1CORE_H
#define ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER2VR1CORE_H

//*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : --accumulation 4 --core --service --n=4 --m=1 --class --path=.
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Numerics/Expressions/IFunctionR2vR1.h"

#include <arcane/ArcaneVersion.h>
#include <arcane/utils/Array.h>
#include <arcane/utils/TraceInfo.h>
 
#include <arcane/utils/NotImplementedException.h>

struct FunctionParser;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ExpressionBuilderR2vR1Core
  : public IFunctionR2vR1
{
public:
  ExpressionBuilderR2vR1Core(FunctionParser * function_parser,
                             bool delegate_destroy = false);

  virtual ~ExpressionBuilderR2vR1Core();

public:
  
  //@{ @name Methods from IIFunction

  //! Initialisation
  void init();
  
  //! Setting parameter
  void setParameter(const Arcane::String & name, const Arcane::Real & parameter);
  void setParameter(      Arcane::Integer index, const Arcane::Real & parameter);
  
  //! Getting number of parameter
  Arcane::Integer nbParameter() const;
  
  //! Getting name of parameter
  Arcane::String parameterName(Arcane::Integer index) const;

  //! Setting vectorized variable
  void setVariable(const Arcane::String & name, const Arcane::Array<Arcane::Real> & variable);
  void setVariable(      Arcane::Integer index, const Arcane::Array<Arcane::Real> & variable);
  
  //! Getting number of variable
  Arcane::Integer nbVariable() const;

  //! Getting name of variable
  Arcane::String variableName(Arcane::Integer index) const;

  //! Setting evaluation vectorized result
  void setEvaluationResult(Arcane::Array<Arcane::Real> & result);

  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(Arcane::Integer di, Arcane::Array<Arcane::Real> & result);
  
  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(const Arcane::String & di, Arcane::Array<Arcane::Real> & result);
  
  //! Eval vectorized data service function
  void eval();

  //! Cleanup
  void cleanup();

  //@}
  
  //@{ @name Local methods

  //! Point-wise evaluation
  void eval(const Arcane::Real& var0,
            const Arcane::Real& var1,
                  Arcane::Real& res0);

  //! Vector evaluation
  void eval(const Arcane::Array<Arcane::Real>& var0,
            const Arcane::Array<Arcane::Real>& var1,
                  Arcane::Array<Arcane::Real>& res0);

  //! Vector evaluation
  void eval(Arcane::RealConstArrayView var0,
            Arcane::RealConstArrayView var1,
                 Arcane::RealArrayView res0);
 
  //! Coupled function and derivative scalar evaluation (temporary: derivation handling in IFunction still to be defined)
  void eval(const Arcane::Real& var0,
            const Arcane::Real& var1,
                  Arcane::Real& res0,
                  Arcane::Real& diffres0,
                  Arcane::Real& diffres1)
  {
    throw Arcane::NotImplementedException(A_FUNCINFO);
  }

  //! Scalar return for point-wise evaluation
  Arcane::Real eval(const Arcane::Real& var0,
                    const Arcane::Real& var1);
  //@}

protected:
  //! Function parser
  FunctionParser * m_function_parser;

  //! Delegate destruction of FunctionParser
  bool m_delegate_destroy;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /*  ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDER2VR1CORE_H */

