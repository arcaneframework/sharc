// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : --accumulation 4 --core --service --n=4 --m=1 --class --path=.
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ExpressionBuilderR2vR1Core.h"

#include "ExpressionBuilderR2vR1_axl.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"
#include "ArcGeoSim/Numerics/Expressions/ExpressionBuilder/LocalExpressionMng.h"
#include "ArcGeoSim/Numerics/Expressions/IExpressionMng.h"
#include "ArcGeoSim/Appli/IAppServiceMng.h"

#include <arcane/ArcaneVersion.h>
#include <arcane/utils/Array.h>
#include <arcane/utils/NotImplementedException.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class ExpressionBuilderR2vR1Service
  : public ArcaneExpressionBuilderR2vR1Object
  , public ExpressionBuilderR2vR1Core
{
public:
  
  ExpressionBuilderR2vR1Service(const Arcane::ServiceBuildInfo & sbi) 
  : ArcaneExpressionBuilderR2vR1Object(sbi)
  , ExpressionBuilderR2vR1Core(new FunctionParser,true)
  , m_initialized(false) {}
  
  ~ExpressionBuilderR2vR1Service() {}

public:

  //! Initialisation
  void init();
  
  //! Point-wise evaluation
  void eval(const Arcane::Real& var0,
            const Arcane::Real& var1,
                  Arcane::Real& res0);

  //! Vector evaluation
  void eval(const Arcane::Array<Arcane::Real>& var0,
            const Arcane::Array<Arcane::Real>& var1,
                  Arcane::Array<Arcane::Real>& res0);

  //! Vector evaluation
  void eval(Arcane::RealConstArrayView var0,
            Arcane::RealConstArrayView var1,
                 Arcane::RealArrayView res0);

  //! Scalar return for point-wise evaluation
  Arcane::Real eval(const Arcane::Real& var0,
                    const Arcane::Real& var1);

  //! Setting parameter
  void setParameter(const Arcane::String& name, 
                    const Arcane::Real & parameter);
  void setParameter(Arcane::Integer index, 
                    const Arcane::Real & parameter);
     
  //! Getting number of parameter
  Arcane::Integer getNbParameter() const;
  
  //! Getting name of variable
  Arcane::String getVariableName(Arcane::Integer index) const;
  
  //! Getting name of parameter
  Arcane::String getParameterName(Arcane::Integer index) const;
  
private:

  bool m_initialized;

  //! Local Expression Manager
  LocalExpressionMng m_expression_mng;
};

using namespace Arcane;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR2vR1Service::
init()
{
  if (m_initialized) return;

  // Recherche de IExpressionMng
  IAppServiceMng* app_service_mng = IAppServiceMng::instance(subDomain()->serviceMng());
  IExpressionMng * expression_mng = app_service_mng->find<IExpressionMng>(false) ;

  // Initialisation du parser
  m_function_parser->init(expression_mng,&m_expression_mng,traceMng());
  
  // Lecture des constantes
  const Arcane::Integer nbConstant = options()->constant.size();
  for(Arcane::Integer iconstant=0; iconstant < nbConstant; ++iconstant) {
    m_expression_mng.setConstant(options()->constant[iconstant].name(),
                                 options()->constant[iconstant].value());
    info() << "Loading local constant " << options()->constant[iconstant].name();
  }

  // Parsing de l'expression
  m_function_parser->parseString(options()->expression());

  // Check expression coherency
  if(getOutDimension() != 1) { //interroger le parser, pour l'instant 1... 
    throw NotImplementedException("ExpressionBuilder cannot manage out dimension greater than 1");
  }
  
  m_initialized = true;
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR2vR1Service::
eval(const Arcane::Real& var0,
     const Arcane::Real& var1,
           Arcane::Real& res0)
{
  if (!m_initialized) {
    fatal() << "ExpressionBuilderR2vR1Service not initialized";
  }
  
  ExpressionBuilderR2vR1Core::eval(var0,
                                   var1,
                                   res0);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR2vR1Service::
eval(const Arcane::Array<Arcane::Real>& var0,
     const Arcane::Array<Arcane::Real>& var1,
           Arcane::Array<Arcane::Real>& res0)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR2vR1Service not initialized";
    }
  
  ExpressionBuilderR2vR1Core::eval(var0,
                                   var1,
                                   res0);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR2vR1Service::
eval(Arcane::RealConstArrayView var0,
     Arcane::RealConstArrayView var1,
          Arcane::RealArrayView res0)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR2vR1Service not initialized";
    }
  
  ExpressionBuilderR2vR1Core::eval(var0,
                                   var1,
                                   res0);
}

/*---------------------------------------------------------------------------*/

Real
ExpressionBuilderR2vR1Service::
eval(const Arcane::Real& var0,
     const Arcane::Real& var1)
{
  if (!m_initialized)
    {
      fatal() << "ExpressionBuilderR2vR1Service not initialized";
    }
  
  return ExpressionBuilderR2vR1Core::eval(var0,
                                          var1);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR2vR1Service::
setParameter(Arcane::Integer index,const Arcane::Real & value)
{
  Arcane::String name = m_function_parser->getParameter(index);

  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR2vR1Service::
setParameter(const Arcane::String & name, const Arcane::Real & value)
{
  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR2vR1Service::
getNbParameter() const
{
  return m_function_parser->getNbParameter();
}

/*---------------------------------------------------------------------------*/

Arcane::String 
ExpressionBuilderR2vR1Service::
getVariableName(Arcane::Integer index) const
{
  return m_function_parser->getVariable(index);
}

/*---------------------------------------------------------------------------*/

Arcane::String
ExpressionBuilderR2vR1Service::
getParameterName(Arcane::Integer index) const
{
  return m_function_parser->getParameter(index);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_EXPRESSIONBUILDERR2VR1(ExpressionBuilderR2vR1,ExpressionBuilderR2vR1Service);

