// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
		
// -*- C++ -*-
/*---------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------- 
 <autogenerated>
   GENERATED FILE : DO NOT MODIFY THIS FILE
   This code was generated by a tool. 
   Changes to this file may cause incorrect behavior and will be lost if 
   the code is regenerated.
   Date of generation : 
   Generator : common/ArcanInfra/tools/ArcaneInfra.Tools/ExpressionBuilderGenerator
   With options : --accumulation 4 --core --service --n=4 --m=1 --class --path=.
 </autogenerated>
  ---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include <arcane/ArcaneVersion.h>
#include "ExpressionBuilderR3vR1Core.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ExpressionBuilderR3vR1Core::
ExpressionBuilderR3vR1Core(FunctionParser * function_parser,
                                 bool delegate_destroy)
 : m_function_parser(function_parser)
 , m_delegate_destroy(delegate_destroy) {}

/*---------------------------------------------------------------------------*/

ExpressionBuilderR3vR1Core::
 ~ExpressionBuilderR3vR1Core()
{
  if (m_delegate_destroy)
    delete m_function_parser;
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
init()
{
  // Do nothing
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR3vR1Core::
setParameter(Arcane::Integer index,const Arcane::Real & value)
{
  Arcane::String name = m_function_parser->getParameter(index);

  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR3vR1Core::
setParameter(const Arcane::String & name, const Arcane::Real & value)
{
  m_function_parser->setParameter(name, value);
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR3vR1Core::
nbParameter() const
{
  return m_function_parser->getNbParameter();
}

/*---------------------------------------------------------------------------*/

Arcane::String
ExpressionBuilderR3vR1Core::
parameterName(Arcane::Integer index) const
{
  return m_function_parser->getParameter(index);
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR3vR1Core::
setVariable(Arcane::Integer index, const Arcane::Array<Arcane::Real> & variable)
{
  String name = m_function_parser->getVariable(index);
  m_function_parser->setVariable(name, variable.unguardedBasePointer(), variable.size());
}

/*---------------------------------------------------------------------------*/

void 
ExpressionBuilderR3vR1Core::
setVariable(const Arcane::String & name, const Arcane::Array<Arcane::Real> & variable)
{
  m_function_parser->setVariable(name, variable.unguardedBasePointer(), variable.size());
}

/*---------------------------------------------------------------------------*/

Arcane::Integer
ExpressionBuilderR3vR1Core::
nbVariable() const
{
  return m_function_parser->getNbVariable();
}

/*---------------------------------------------------------------------------*/

Arcane::String 
ExpressionBuilderR3vR1Core::
variableName(Arcane::Integer index) const
{
  return m_function_parser->getVariable(index);
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
setEvaluationResult(Arcane::Array<Arcane::Real> & result)
{
  m_function_parser->setEvaluationResult(result.unguardedBasePointer(),result.size());
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
setDerivationResult(Arcane::Integer di, Arcane::Array<Arcane::Real> & result) {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
setDerivationResult(const Arcane::String & di, Arcane::Array<Arcane::Real> & result) {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
eval() {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
cleanup() {}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
eval(const Arcane::Real& var0,
     const Arcane::Real& var1,
     const Arcane::Real& var2,
           Arcane::Real& res0)

{
  const std::string &var0_name = m_function_parser->getVariable(0);
  m_function_parser->setVariable(var0_name, & var0, 1);
  const std::string &var1_name = m_function_parser->getVariable(1);
  m_function_parser->setVariable(var1_name, & var1, 1);
  const std::string &var2_name = m_function_parser->getVariable(2);
  m_function_parser->setVariable(var2_name, & var2, 1);

  m_function_parser->setEvaluationResult(& res0, 1);

  m_function_parser->eval();
  m_function_parser->cleanup();
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
eval(const Arcane::Array<Arcane::Real>& var0,
     const Arcane::Array<Arcane::Real>& var1,
     const Arcane::Array<Arcane::Real>& var2,
           Arcane::Array<Arcane::Real>& res0)
{
  const std::string &var0_name = m_function_parser->getVariable(0);
  m_function_parser->setVariable(var0_name, var0.unguardedBasePointer(), var0.size());  
  const std::string &var1_name = m_function_parser->getVariable(1);
  m_function_parser->setVariable(var1_name, var1.unguardedBasePointer(), var1.size());  
  const std::string &var2_name = m_function_parser->getVariable(2);
  m_function_parser->setVariable(var2_name, var2.unguardedBasePointer(), var2.size());  

  m_function_parser->setEvaluationResult(res0.unguardedBasePointer(), res0.size());

  m_function_parser->eval();
  m_function_parser->cleanup();
}

/*---------------------------------------------------------------------------*/

void
ExpressionBuilderR3vR1Core::
eval(Arcane::RealConstArrayView var0,
     Arcane::RealConstArrayView var1,
     Arcane::RealConstArrayView var2,
          Arcane::RealArrayView res0)
{
  const std::string &var0_name = m_function_parser->getVariable(0);
  m_function_parser->setVariable(var0_name, var0.unguardedBasePointer(), var0.size());  
  const std::string &var1_name = m_function_parser->getVariable(1);
  m_function_parser->setVariable(var1_name, var1.unguardedBasePointer(), var1.size());  
  const std::string &var2_name = m_function_parser->getVariable(2);
  m_function_parser->setVariable(var2_name, var2.unguardedBasePointer(), var2.size());  

  m_function_parser->setEvaluationResult(res0.unguardedBasePointer(), res0.size());

  m_function_parser->eval();
  m_function_parser->cleanup();
}

/*---------------------------------------------------------------------------*/

Arcane::Real
ExpressionBuilderR3vR1Core::
eval(const Arcane::Real& var0,
     const Arcane::Real& var1,
     const Arcane::Real& var2)
{
  const std::string &var0_name = m_function_parser->getVariable(0);
  m_function_parser->setVariable(var0_name, & var0, 1);
  const std::string &var1_name = m_function_parser->getVariable(1);
  m_function_parser->setVariable(var1_name, & var1, 1);
  const std::string &var2_name = m_function_parser->getVariable(2);
  m_function_parser->setVariable(var2_name, & var2, 1);

  Arcane::Real res0;
  m_function_parser->setEvaluationResult(& res0, 1);

  m_function_parser->eval();
  m_function_parser->cleanup();

  return res0 ;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

