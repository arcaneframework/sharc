// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDERSERVICE_H
#define ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDERSERVICE_H
/* Author : havep at Thu Oct 30 15:53:18 2008
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/ 

#include <arcane/ArcaneVersion.h>
#include "ArcGeoSim/Numerics/Expressions/IFunction.h"

#include "ExpressionBuilder_axl.h"

#include "ArcGeoSim/Numerics/Expressions/FunctionParser/FunctionParser.h"

#include "LocalExpressionMng.h"

#include <arcane/utils/Array.h>

#include <map>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/ 

class ExpressionBuilderService 
  : public ArcaneExpressionBuilderObject
{
public:
  
  ExpressionBuilderService(const Arcane::ServiceBuildInfo & sbi)
    : ArcaneExpressionBuilderObject(sbi)
    , m_initialized(false) {}

  ~ExpressionBuilderService() {}

public:

  //! Initialisation
  void init();
  
  //! Getting dimension of in-space
  Arcane::Integer getInDimension() const;
  
  //! Getting dimension of out-space
  Arcane::Integer getOutDimension() const;
  
  //! Setting parameter
  void setParameter(const Arcane::String & name, const Arcane::Real & parameter);
  void setParameter(      Arcane::Integer index, const Arcane::Real & parameter);
 
  //! Getting number of parameter
  Arcane::Integer nbParameter() const;
  
  //! Getting name of parameter
  Arcane::String parameterName(Arcane::Integer index) const;

  //! Setting vectorized variable
  void setVariable(const Arcane::String & name, const Arcane::Array<Arcane::Real> & variable);
  void setVariable(      Arcane::Integer index, const Arcane::Array<Arcane::Real> & variable);
  
  //! Getting number of variable
  Arcane::Integer nbVariable() const;
  
  //! Getting name of variable
  Arcane::String variableName(Arcane::Integer index) const;

  //! Setting evaluation vectorized result
  void setEvaluationResult(Arcane::Array<Arcane::Real> & result);

  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(Arcane::Integer di, Arcane::Array<Arcane::Real> & result);

  //! Setting derivation vectorized result
  /*! Derivation following @name di variable */
  void setDerivationResult(const Arcane::String & di, Arcane::Array<Arcane::Real> & result);
  
  //! Eval vectorized data service function
  void eval();
  
  //! Cleanup after evaluation
  void cleanup();

private:

  bool m_initialized;

  //! Function parser
  FunctionParser m_function_parser;
  
  //! Result container
  Arcane::SharedArray<Arcane::SharedArray<Arcane::Real>*> m_result;

  //! Local Expression Manager
  LocalExpressionMng m_expression_mng;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/ 

#endif /* ARCGEOSIM_EXPRESSIONS_EXPRESSIONBUILDER_EXPRESSIONBUILDERSERVICE_H */
