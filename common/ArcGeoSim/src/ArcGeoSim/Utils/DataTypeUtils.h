// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_UTILS_DATATYPEUTILS_H
#define ARCGEOSIM_UTILS_DATATYPEUTILS_H
/* Author : dechaiss at Thu Nov 18 10:35:17 2010
 * Generated by createNew
 */

#include <arcane/datatype/DataTypes.h>
#include <arcane/datatype/DataTypeTraits.h>


#include "ArcGeoSim/Utils/ArcGeoSim.h"

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/

// Utils to handle Arcane::eDataType
// Declaration
namespace DataTypeConversion
{

//! Convertit eDataType en un String
inline Arcane::String dataTypeToString(const Arcane::eDataType& data_type);

//! Surcharge Arcane::dataTypeFromName(data_type_name) qui ne gere pas pour l'instant la chaine Integer
inline Arcane::eDataType stringToDataType(const Arcane::String& data_type_name);

//! Retourne le type de base (ex DT_Real) pour tous les types derives de real
inline Arcane::eDataType basicDataType(const Arcane::eDataType& data_type);

//! Retourne le type de base (ex DT_Real) pour tous les types derives de real a partir du nom
inline Arcane::eDataType basicDataTypeFromName(const Arcane::String& data_type_name);

}


//! Definition
namespace DataTypeConversion
{
Arcane::String
dataTypeToString(const Arcane::eDataType& data_type)
{
  // Obtain string from Arcane::eDataType
  switch (data_type)
  {
  case Arcane::DT_Byte:
    {
      return "Byte";
      break;
    }
  case Arcane::DT_Real:
    {
      return "Real";
      break;
    }
  case Arcane::DT_Int32:
    {
      return "Int32";
      break;
    }
  case Arcane::DT_Int64:
    {
      return "Int64";
      break;
    }
  case Arcane::DT_String:
    {
      return "String";
      break;
    }
  case Arcane::DT_Real2:
    {
      return "Real2";
      break;
    }
  case Arcane::DT_Real3:
      {
        return "Real3";
        break;
      }
  case Arcane::DT_Real2x2:
      {
        return "Real2x2";
        break;
      }
  case Arcane::DT_Real3x3:
      {
        return "Real3x3";
        break;
      }
  case Arcane::DT_Unknown:
      {
        return "Unknown";
        break;
      }
  }
  return "";
}

Arcane::eDataType
stringToDataType(const Arcane::String& data_type_name)
{
  // This method
  if (data_type_name=="Integer") return Arcane::DataTypeTraitsT<Integer>::type();
  else return Arcane::dataTypeFromName(data_type_name.localstr());
}

Arcane::eDataType
basicDataType(const Arcane::eDataType& data_type)
{
  if (data_type == Arcane::DT_Real || data_type == Arcane::DT_Real3 || data_type == Arcane::DT_Real2 ||
      data_type == Arcane::DT_Real2x2|| data_type == Arcane::DT_Real3x3)
    return Arcane::DT_Real;
  else return data_type;
}

Arcane::eDataType
basicDataTypeFromName(const Arcane::String& data_type_name)
{
  if (data_type_name == "Real" || data_type_name == "Real3" || data_type_name == "Real2" || data_type_name == "Real2x2"|| data_type_name == "Real3x3")
    return Arcane::DT_Real;
  else return stringToDataType(data_type_name);
}

}// end namespace DataTypeConversion


END_ARCGEOSIM_NAMESPACE

#endif /* ARCGEOSIM_UTILS_DATATYPEUTILS_H */
