// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_UTILS_VARIABLEREFARRAY3PROXY_H
#define ARCGEOSIM_ARCGEOSIM_UTILS_VARIABLEREFARRAY3PROXY_H
/* Author : desrozis at Wed Dec 19 12:20:34 2012
 * Generated by createNew
 */

#include <arcane/ArcaneTypes.h>
#include <arcane/MeshVariable.h>
#include <arcane/ItemTypes.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// Pour avoir une API similaire et a priori bientot dans Arcane
ARCANE_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<typename T>
class VariableRefArray3T : public VariableRefArray2T<T>
{
  typedef VariableRefArray2T<T> Base;

public:
  
  typedef T DataType;
  typedef Array2<T> ValueType; // Pas encore coherent, il faudrait Array3
  typedef ConstArray2View<T> ConstReturnReferenceType;
  typedef Array2View<T> ReturnReferenceType;
 
public:
  
  VariableRefArray3T(VariableBuildInfo vbi) 
    : Base(vbi)
    , m_size_x(VariableBuildInfo(vbi.mesh(), vbi.name() + "_Size_X"))
    , m_size_y(VariableBuildInfo(vbi.mesh(), vbi.name() + "_Size_Y")) 
    , m_size_z(VariableBuildInfo(vbi.mesh(), vbi.name() + "_Size_Z")) {}
  
public:
 
  void resize(Integer size_x) {
    m_size_x = size_x;
    Base::resize(m_size_x());
  }
  
  void resize(Integer size_x, Integer size_y, Integer size_z) {
    m_size_x = size_x;
    m_size_y = size_y;
    m_size_z = size_z;
    Base::resize(m_size_x(),m_size_y()*m_size_z());
  }
  
  Integer dim1Size() const { return m_size_x(); }
  Integer dim2Size() const { return m_size_y(); }
  Integer dim3Size() const { return m_size_z(); }

  Array2View<T> operator[](Integer i) 
  {
    ARCANE_CHECK_AT(i,m_size_x());
    return Array2View<T>(Base::operator[](i).unguardedBasePointer(), m_size_y(), m_size_z());
  }
 
  ConstArray2View<T> operator[](Integer i) const
  {
    ARCANE_CHECK_AT(i,m_size_x());
    return ConstArray2View<T>(Base::operator[](i).unguardedBasePointer(), m_size_y(), m_size_z());
  }
  
private:
  VariableScalarInteger m_size_x;
  VariableScalarInteger m_size_y;
  VariableScalarInteger m_size_z;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

typedef VariableRefArray3T<Real>    VariableArray3Real;
typedef VariableRefArray3T<Real2>   VariableArray3Real2;
typedef VariableRefArray3T<Real2x2> VariableArray3Real2x2;
typedef VariableRefArray3T<Real3>   VariableArray3Real3;
typedef VariableRefArray3T<Real3x3> VariableArray3Real3x3;
typedef VariableRefArray3T<Integer> VariableArray3Integer;
typedef VariableRefArray3T<Int32>   VariableArray3Int32;
typedef VariableRefArray3T<Int64>   VariableArray3Int64;
typedef VariableRefArray3T<Byte>    VariableArray3Byte;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_END_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_UTILS_VARIABLEREFARRAY3PROXY_H */
