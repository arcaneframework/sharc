// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_UTILS_ARRAY3PROXY_H
#define ARCGEOSIM_ARCGEOSIM_UTILS_ARRAY3PROXY_H
/* Author : desrozis at Wed Dec 19 12:20:34 2012
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include <arcane/ArcaneTypes.h>
#include <arcane/utils/Array2.h>

#ifdef ARCGEOSIM_USE_CXX11
/* C++11 sets the value of __cplusplus to 201103L.
 * That asserts full conformance to the 2011 standard;
 * it doesn't tell you about partial conformance or compiler extensions.
 * If __cplusplus is set to 201103L, then either the compiler fully conforms or it's lying to you.
 * If it's not, then you can't really tell which features it supports.
 */
#include <memory>
namespace shared_ptr_namespace = std;
#else /* ARCGEOSIM_USE_CXX11 */
#include <boost/shared_ptr.hpp>
namespace shared_ptr_namespace = boost;
#endif /* ARCGEOSIM_USE_CXX11 */



// TODO: Mecanisme de View a faire

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// Pour avoir une API similaire et a priori bientot dans Arcane
ARCANE_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

template<typename T>
class Array3
{
public:
  
  Array3() 
    : m_size_x(new Integer(0))
    , m_size_y(new Integer(0)) {}
  
  Array3(Integer nb, Integer size_x, Integer size_y)
    : m_array(nb,size_x*size_y)
    , m_size_x(new Integer(size_x))
    , m_size_y(new Integer(size_y)) {}

  Array3(const Array3& array)
    : m_array(array.m_array)
    , m_size_x(array.m_size_x)
    , m_size_y(array.m_size_y) {}
  
  Array2View<T> operator[](Integer i) {
    return Array2View<T>(m_array[i].unguardedBasePointer(), *m_size_x, *m_size_y);
  }

  ConstArray2View<T> operator[](Integer i) const {
    return ConstArray2View<T>(m_array[i].unguardedBasePointer(), *m_size_x, *m_size_y);
  }

  void resize(Integer d1, Integer d2, Integer d3) 
  {
    m_array.resize(d1,d2*d3);
    *m_size_x = d2;
    *m_size_y = d3;
  }
  
  Integer dim1Size() const { return m_array.dim1Size(); }
  Integer dim2Size() const { return *m_size_x; }
  Integer dim3Size() const { return *m_size_y; }
  
private:
  
  Array2<T> m_array;
  shared_ptr_namespace::shared_ptr<Integer> m_size_x;
  shared_ptr_namespace::shared_ptr<Integer> m_size_y;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

typedef Array3<Real>       RealArray3;
typedef Array3<Real2>     Real2Array3;
typedef Array3<Real2x2> Real2x2Array3;
typedef Array3<Real3>     Real3Array3;
typedef Array3<Real3x3> Real3x3Array3;
typedef Array3<Integer> IntegerArray3;
typedef Array3<Int32>     Int32Array3;
typedef Array3<Int64>     Int64Array3;
typedef Array3<Byte>       BoolArray3;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_END_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_UTILS_MESHARRAY2PROXY_H */
