// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCTEMREFACTORING_ARCTEMUTILS_OUTPUTFORMATTING_INDENTATION_H
#define ARCTEMREFACTORING_ARCTEMUTILS_OUTPUTFORMATTING_INDENTATION_H
/* Author : desrozis at Mon Jan 13 09:38:00 2014
 * Generated by createNew
 */

#include <arcane/utils/String.h>
#include <arcane/utils/StringBuilder.h>

#include <iomanip>

namespace OutputFormatting {

  class Indentation
  {
  private:

    enum ColumnIndentation { eLeft, eRight, eCenter };

  public:

    Indentation(char c)
    {
      if(c == 'l')
        m_indentation = eLeft;
      else if(c == 'r')
        m_indentation = eRight;
      else
        m_indentation = eCenter;
    }

    const Indentation& operator()(std::ostream& nout, Arcane::Integer size, Arcane::String s) const
    {
      switch(m_indentation){
      case eLeft :
        nout << std::left << std::setw(size) << s;
        break;
      case eRight :
        nout << std::right << std::setw(size) << s << std::left;
        break;
      case eCenter :
        nout << _centered(size, s);
        break;
      }

      return *this;
    }

  private:

    Arcane::String _centered(Arcane::Integer width, Arcane::String str) const
    {
      const Arcane::Integer len = str.length();
      if(width < len) { return str; }

      const Arcane::Integer diff = width - len;
      const Arcane::Integer pad1 = diff/2;
      const Arcane::Integer pad2 = diff - pad1;
      Arcane::StringBuilder sb;
      sb += std::string(pad1, ' ');
      sb += str;
      sb += std::string(pad2, ' ');
      return sb.toString();
    }

  private:

    ColumnIndentation m_indentation;
  };
  
}


#endif /* ARCTEMREFACTORING_ARCTEMUTILS_OUTPUTFORMATTING_INDENTATION_H */
