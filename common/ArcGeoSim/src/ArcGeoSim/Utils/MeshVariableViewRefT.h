// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_UTILS_MESHVARIABLEVIEWREFT_H
#define ARCGEOSIM_UTILS_MESHVARIABLEVIEWREFT_H
/* Author : desrozis at Tue Jan  6 18:42:22 2009
 * Generated by createNew
 */

/*
 * Classe permettant de voir les objets MeshVariableArrayRefT 
 * comme des objets MeshVariableRefT pour les accessions
 *
 *
 * A n'utiliser pour l'heure que pour la factorisation de code
 *
 */

namespace Arcane {}
using namespace Arcane;

#include <arcane/MeshVariable.h>

template<typename ItemType,typename DataType>
class MeshVariableViewRefT
{
public:
  /** Constructeur de la classe */
  MeshVariableViewRefT(MeshVariableArrayRefT<ItemType,DataType>& variable, Integer offset) 
    : m_offset(offset)
    , m_variable(variable)
  {
    ;
  }
  
  /** Destructeur de la classe */
  virtual ~MeshVariableViewRefT() {}
  
public:

  void fill(const DataType& data)
  {
    m_variable.fill(data);
  }
    
  const DataType& operator[](const ItemType& item) const
    { return this->m_view[item.localId()][m_offset]; }
  
  DataType& operator[](const ItemType& item)
    { return this->m_view[item.localId()][m_offset]; }
  
  const DataType& operator[](const ItemGroupRangeIteratorT<ItemType>& item) const
    { return this->m_view[item.itemLocalId()][m_offset]; }
  
  DataType& operator[](const ItemGroupRangeIteratorT<ItemType>& item)
    { return this->m_view[item.itemLocalId()][m_offset]; }
  
  const DataType& operator[](const ItemPairEnumeratorSubT<ItemType>& item) const
    { return this->m_view[item.itemLocalId()][m_offset]; }
  
  DataType& operator[](const ItemPairEnumeratorSubT<ItemType>& item)
    { return this->m_view[item.itemLocalId()][m_offset]; }
  
  const DataType& operator[](const ItemEnumeratorT<ItemType>& item) const
    { return this->m_view[item.localId()][m_offset]; }
  
  DataType& operator[](const ItemEnumeratorT<ItemType>& item)
    { return this->m_view[item.localId()][m_offset]; }

private:
  
  //! Offset
  Integer m_offset;
  
  //! Inner array variable
  MeshVariableArrayRefT<ItemType,DataType>& m_variable;
};

#endif /* ARCGEOSIM_UTILS_MESHVARIABLEVIEWREFT_H */
