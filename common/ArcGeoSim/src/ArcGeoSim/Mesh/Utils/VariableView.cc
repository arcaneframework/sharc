// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "VariableView.h"
/* Author : dechaiss at Wed Nov  7 13:27:03 2012
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

namespace VariableUtils {

/*---------------------------------------------------------------------------*/
// Class VariableData
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

VariableData
VariableView::
operator[](const Arcane::ItemGroup& item_group)
{
  Arcane::IntegerSharedArray data_indexes;
  if (m_ivariable->itemKind() == Arcane::IK_Unknown) // scalar and array Variable
    {
      ARCANE_ASSERT((item_group.empty()),("Cannot ask for item values on a variable not defined on mesh."))
      Arcane::Integer nb_element = m_ivariable->nbElement();
      data_indexes.resize(nb_element);
      for (Arcane::Integer i = 0 ; i < nb_element ; ++i) data_indexes[i] = i;
    }
  else // MeshVariable
    {
      data_indexes.resize(item_group.size());
      Arcane::Integer index = 0;
      if (! m_ivariable->isPartial()) // scalar and array MeshVariable
        {
          ENUMERATE_ITEM(iitem,item_group)
            {
              data_indexes[index] = iitem->localId();
              ++index;
            }
        }
      else // scalar and array PartialMeshVariable
        {
          const Arcane::GroupIndexTable& group_index_table = (*m_ivariable->itemGroup().localIdToIndex());
          ENUMERATE_ITEM(iitem,item_group)
            {
              data_indexes[index] = group_index_table[iitem->localId()];
              ++index;
            }
        }
    }
  return VariableData(data_indexes,m_ivariable->data());
}

/*---------------------------------------------------------------------------*/

void
VariableData::
operator=(const GenericArray& array)
{
  const ArcGeoSim::ArrayMng* array_mng = array._constArrayMng();
  ARCANE_ASSERT((array_mng),("Array Mng is null in Generic Array. Cannot proceed."))
  array_mng->fillData(m_idata,m_data_indexes,array._dataKey());
}

/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
// Class Generic Array
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

GenericArray::
GenericArray()
  : m_array_mng(NULL)
  , m_const_array_mng(NULL)
  , m_handle_memory(false){}

/*---------------------------------------------------------------------------*/

GenericArray::
GenericArray(ArrayMng* array_mng)
  : m_array_mng(array_mng)
  , m_const_array_mng(array_mng)
  , m_handle_memory(false){}

/*---------------------------------------------------------------------------*/

GenericArray::
GenericArray(ArrayMng* array_mng, const Arcane::String& values)
  : m_array_mng(array_mng)
  , m_const_array_mng(array_mng)
  , m_handle_memory(false)
{
  m_data_key = m_array_mng->extractDataFromString(values);
}

/*---------------------------------------------------------------------------*/

GenericArray::
GenericArray(ArrayMng* array_mng,
             const Arcane::String& filename,
             const Arcane::String& file_position,
             ArcGeoSim::ParallelUtils& parallel_utils)
  : m_array_mng(array_mng)
  , m_const_array_mng(array_mng)
  , m_handle_memory(false)
{
  m_data_key = m_array_mng->collectiveExtractDataFromFile(filename,file_position,parallel_utils);
}

/*---------------------------------------------------------------------------*/

GenericArray::
GenericArray(GenericArray::ArrayInternal array_internal)
  : m_array_mng(array_internal.second)
  , m_const_array_mng(array_internal.second)
  , m_data_key(array_internal.first)
  , m_handle_memory(false){}

/*---------------------------------------------------------------------------*/

GenericArray::
~GenericArray()
{
  if (m_handle_memory && m_array_mng) delete m_array_mng;
}

/*---------------------------------------------------------------------------*/

void
GenericArray::
operator=(VariableData variable_data)
{
  m_array_mng->extractData(m_data_key,variable_data._data(),variable_data._dataIndexes());
}

/*---------------------------------------------------------------------------*/

GenericArray
GenericArray::
operator[] (Arcane::IntegerSharedArray indexes)
{
  ArrayMng::DataKey extracted_data = m_array_mng->extractSubData(m_data_key,indexes);
  return GenericArray(std::make_pair(extracted_data,m_array_mng));
}

/*---------------------------------------------------------------------------*/

}  // namespace VariableUtils

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
