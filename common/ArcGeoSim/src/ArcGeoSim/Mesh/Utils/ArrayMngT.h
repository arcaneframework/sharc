// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_MESH_EVOLUTIVEMESH_UTILS_TYPEDDATA_H
#define ARCGEOSIM_MESH_EVOLUTIVEMESH_UTILS_TYPEDDATA_H
/* Author : dechaiss at Tue May 31 16:12:00 2011
 * Generated by createNew
 */

#include <map>
#include <iostream>

#include <arcane/ArcaneTypes.h>
#include <arcane/ISubDomain.h>
#include <arcane/datatype/DataTypeTraits.h>

#include "ArcGeoSim/Utils/ArcGeoSim.h"
#include "ArcGeoSim/Mesh/Utils/ArrayMng.h"

using namespace Arcane;

BEGIN_ARCGEOSIM_NAMESPACE

template<class DataType>
class ArrayMngT : public ArcGeoSim::ArrayMng
{
//! Classe de manipulation de tableaux de type DataType. Impl�mente ITypedData
public:

  //! Constructeur de la classe
  ArrayMngT(Arcane::ISubDomain* subdomain)
  : m_counter(0)
  , m_subdomain(subdomain){}

  //! Destructeur de la classe
  virtual ~ArrayMngT() {}

public:

  //! Cr�ation du tableau par extraction du tableau d'une IData \a data
  DataKey extractData(IData* const data, const Int32ConstArrayView& data_indexes);

  /* ! Extraction des valeurs d'une IData dans le tableau reference par \a data_key. Si  \a data_key ne reference pas
   *   de tableau. Un nouveau tableau est cree et la cle est ecrase par la cle de ce nouveau tableau
   */
  void extractData(DataKey& data_key, Arcane::IData* const data,const Int32ConstArrayView& data_indexes);

  //! Cr�ation du tableau par extraction du tableau d'un string \a data_string
  DataKey extractDataFromString(const String& data_string);

  //! Cr�ation du tableau par extraction du tableau d'un fichier HDF5 \a filename. La position dans le fichier est donnee par \a file_position
  //! Cette operation est parallele
  DataKey collectiveExtractDataFromFile(const String& hdf5_filename, const String& hdf5_file_position, ArcGeoSim::ParallelUtils& parallel_utils);

  //! Cr�ation du tableau par extraction d'un sous tableau pr�cedemment cr��
  DataKey extractSubData(const DataKey& data_key, const Array<Integer>& extracted_value_indexes);

  /*! Copie les valeurs du tableau r�f�renc� par \a source_value_key dans l'IData \a data aux positions \a data_indexes
   *  La taille du tableau r�f�renc� par \a source_value_key doit �tre �gale � la taille de \a data_indexes
   */
  void fillData(IData* const data, const Int32ConstArrayView& data_indexes, const DataKey& source_value_key) const;

  /*! Interpole deux tableaux stock�s. Les points \a first_point et \a second_point fournissent, par l'interm�diaire
   * des cl�s deux tableux de valeurs ainsi que l'abscisse correspondant � ces valeurs. L'interpolation est r�alis�e au
   * point \a interpolation_point.
   * Un nouveau tableau contenant les donn�es interpol�es est cr��. Sa cl� est retourn�e
   */
  DataInterpolatedPoint interpolateData(const Real& interpolation_time,
                                        const DataInterpolationPoint& first_point,
                                        const DataInterpolationPoint& second_point);

  //! D�truit le tableau r�f�renc� par la cl� \a data_key
  void deleteData(const DataKey& data_key);

  //! Donne la taille d'un tableau r�f�renc� par \a data_key
  Integer dataSize(const DataKey& data_key) const;

  //! Affiche la taille et le contenu du tableau r�f�renc� par \a data_key
  void print(std::ostream& o,const DataKey& data_key) const;

  //! Retourne le tableau concret typ�
  Arcane::SharedArray<DataType> array(const DataKey& data_key) const;

  //! Enregistre le tableau concret type
  DataKey registerArray(const Arcane::SharedArray<DataType>& array);

  //! Retourne le type de la donnee
  Arcane::eDataType dataType() const {return Arcane::DataTypeTraitsT<DataType>::type();}

private:
  typedef std::map<String,SharedArray<DataType> > DataCollection;
  DataCollection m_data_collection;
  Integer m_counter;
  Arcane::ISubDomain* m_subdomain;

private:
  DataKey _keyGenerator();
  DataKey _addData(const SharedArray<DataType>& data);
  void _extractDataBase(Arcane::SharedArray<DataType> & values, Arcane::IData* const data,const Int32ConstArrayView& data_item_indexes);

  void _readFile(Array<DataType>& data, const String& hdf5_filename, const String& hdf5_file_position);

};

END_ARCGEOSIM_NAMESPACE

#include "ArrayMngTImpl.h"


#endif /* ARCGEOSIM_MESH_EVOLUTIVEMESH_UTILS_TYPEDDATA_H */
