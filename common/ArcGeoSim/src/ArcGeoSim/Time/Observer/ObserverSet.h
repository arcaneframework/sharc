// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_TIME_OBSERVER_TIMESTEPOBSERVABLE_H
#define ARCGEOSIM_ARCGEOSIM_TIME_OBSERVER_TIMESTEPOBSERVABLE_H
/* Author : desrozis at Sat Nov 15 15:11:52 2014
 * Generated by createNew
 */

#include "ArcGeoSim/Time/Observer/IObserver.h"
#include "ArcGeoSim/Time/Observer/IObservable.h"

#include "ArcGeoSim/Time/Activity/TimeStepEntryPoint.h"
#include "ArcGeoSim/Time/Activity/TimeStepState.h"

#include <vector>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace TimeStep {

  class ObserverSet
  {
  public:
    
    typedef std::vector<TimeStep::IObserver*>::iterator iterator;
    typedef std::vector<TimeStep::IObserver*>::const_iterator const_iterator;

    ObserverSet(IObservable* observable)
      : m_observable(observable) {}
     
  public:
    
    void attachObserver(IObserver* observer);
    void detachObserver(IObserver* observer);
    
    void notifyObservers(const EntryPoint& entry_point);
    
    void notifyObservers(eTimeStepState state);
    
    iterator begin() { return m_observers.begin(); }
    iterator   end() { return m_observers.end(); }

    const_iterator begin() const { return m_observers.begin(); }
    const_iterator   end() const { return m_observers.end(); }

    Arcane::Integer size() const { return m_observers.size(); }

  private:
    
    IObservable* m_observable;

    std::vector<IObserver*> m_observers;
  };
  
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_TIME_OBSERVER_TIMESTEPOBSERVABLE_H */
