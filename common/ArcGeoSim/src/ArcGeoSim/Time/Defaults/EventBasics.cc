// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "EventBasics.h"
/* Author : desrozis at Thu Oct 30 16:54:25 2014
 * Generated by createNew
 */

#ifdef WIN32
#include <ciso646>
#endif

#include <arcane/utils/TraceAccessor.h>
#include <arcane/ISubDomain.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

extern "C" Arcane::ISubDomain* _arcaneGetDefaultSubDomain();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

EventBasics::
EventBasics(Arcane::String name,
            Arcane::Real date,
            Arcane::Integer entry_points,
            Arcane::Integer types)
  : Arcane::TraceAccessor(_arcaneGetDefaultSubDomain()->traceMng())
  , TimeVariables(_arcaneGetDefaultSubDomain())
  , m_name(name)
  , m_start_date(date)
  , m_end_date(date)
  , m_entry_points(entry_points)
  , m_types(types)
  , m_observable(NULL) {}

/*---------------------------------------------------------------------------*/

EventBasics::
EventBasics(Arcane::String name,
            Arcane::Real start_date,
            Arcane::Real end_date,
            Arcane::Integer entry_points,
            Arcane::Integer types)
  : Arcane::TraceAccessor(_arcaneGetDefaultSubDomain()->traceMng())
  , TimeVariables(_arcaneGetDefaultSubDomain())
  , m_name(name)
  , m_start_date(start_date)
  , m_end_date(end_date)
  , m_entry_points(entry_points)
  , m_types(types)
  , m_observable(NULL) {}

/*---------------------------------------------------------------------------*/

void
EventBasics::
attachObservable(TimeStep::IObservable* observable)
{
  ARCANE_ASSERT((observable != NULL),("ITimeStepObservable pointer null"));

  m_observable = observable;
}

/*---------------------------------------------------------------------------*/

void
EventBasics::
notify(const TimeStep::EntryPoint& entry_point)
{
  if(not(entry_point & m_entry_points)) return;

  const Arcane::Real time =
    (entry_point == TimeStep::BeforeRestoreSave()) ? m_time() : m_time_n();

  if( (time == m_start_date) ||
      ((time > m_start_date) && (time < m_end_date)))
    execute();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
