// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
#ifndef ARCGEOSIM_ARCGEOSIM_TIME_TIMELINE_SPIEDTIMEVARIABLES_H
#define ARCGEOSIM_ARCGEOSIM_TIME_TIMELINE_SPIEDTIMEVARIABLES_H
/* Author : desrozis at Sun Oct 26 22:30:37 2014
 * Generated by createNew
 */

#include "ArcGeoSim/Time/TimeVariables.h"

#include "ArcGeoSim/Utils/Spy.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class SpiedTimeVariables
  : public TimeVariables
{
public:
  
  SpiedTimeVariables(Arcane::ISubDomain* sd)
    : TimeVariables(sd)
    , m_spied_time(m_time)
    , m_spied_initial_time(m_initial_time)
    , m_spied_final_time(m_final_time)
    , m_spied_init_dt(m_init_dt)
    , m_spied_dt(m_dt)
    , m_spied_forced_dt(m_forced_dt) {}
  
  virtual ~SpiedTimeVariables() {}
  
  void lock()
  {
    m_spied_time.lock();
    m_spied_initial_time.lock();
    m_spied_final_time.lock();
    m_spied_init_dt.lock();
    m_spied_dt.lock();
    m_spied_forced_dt.lock();
  }

  void unlock(SpyPolicy::ePolicy policy = SpyPolicy::FatalIfChanged)
  {
     m_spied_time.unlock(policy);
     m_spied_initial_time.unlock(policy);
     m_spied_final_time.unlock(policy);
     m_spied_init_dt.unlock(policy);
     m_spied_dt.unlock(policy);
     m_spied_forced_dt.unlock(SpyPolicy::NothingIfChanged);
  }

protected:

  //! Current time
  Spy<Arcane::VariableScalarReal> m_spied_time;

  //! Initial time
  Spy<Arcane::VariableScalarReal> m_spied_initial_time;

  //! Final time
  Spy<Arcane::VariableScalarReal> m_spied_final_time;

  //! Initial time step
  Spy<Arcane::VariableScalarReal> m_spied_init_dt;

  //! Current time step
  Spy<Arcane::VariableScalarReal> m_spied_dt;

  //! User forced time step
  // policy is never fatal
  Spy<Arcane::VariableScalarReal> m_spied_forced_dt;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ARCGEOSIM_ARCGEOSIM_TIME_TIMELINE_SPIEDTIMEVARIABLES_H */
