// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "TimeStepEntryPoint.h"
/* Author : desrozis at Sun Oct 26 21:28:48 2014
 * Generated by createNew
 */

#include "ArcGeoSim/Appli/AppService.h"
#include "ArcGeoSim/Time/ITimeLine.h"
#include <arcane/ArcaneException.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

TimeStep::EntryPoint::
EntryPoint(Arcane::Integer key, Arcane::String name) 
  : m_key(1 << key)
  , m_name(name)
{
  ;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
TimeStep::EntryPoint::
notify()
{
  ArcGeoSim::AppService<ArcGeoSim::ITimeLine> time;
  
  time->notify(*this);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

TimeStep::EntryPoints::
EntryPoints()
{
  // Enregistrement manuel des EntryPoint's internes Begin(0), End(1), BeforeRestoreSave(2) (cf déclaration dans .h)
  m_entry_points["Begin"] = 0;
  m_entry_points["End"] = 1;
  m_entry_points["BeforeRestoreSave"] = 2;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

TimeStep::EntryPoint 
TimeStep::EntryPoints::
newUserEntryPoint()
{
  Integer key = m_entry_points.size();
  String name = String::format("#NoName{0}", key);
  // ce nom est volontairement illegal vis-à-vis de checkName 
  // pour ne pas entrer en collision avec un nom choisi par l'utilisateur
  m_entry_points[name] = key;
  checkKey(key);
  return EntryPoint(key, name);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

TimeStep::EntryPoint 
TimeStep::EntryPoints::
userEntryPoint(Arcane::String name, eCheckPolicy check_policy)
{
  checkName(name);

  std::pair<EntryPointInternalMap::iterator, bool> inserter = 
    m_entry_points.insert(EntryPointInternalMap::value_type(name, m_entry_points.size()));

  switch (check_policy) {
  case CheckIsNew:
    if (inserter.second)
      throw Arcane::FatalErrorException(A_FUNCINFO,String::format("Already existing entry point id '{0}'", name));
    break;
  case CheckExisting:
    if (!inserter.second)
      throw Arcane::FatalErrorException(A_FUNCINFO,String::format("Undefined entry point id '{0}'", name));
    break;
  case CreateIfNew:
    // no check
    break;
  default:
    throw Arcane::InternalErrorException(A_FUNCINFO,"Illegal policy");
  }

  const Integer key = inserter.first->second;
  checkKey(key);
  return EntryPoint(key, inserter.first->first);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
TimeStep::EntryPoints::
checkName(Arcane::String name) 
{
  // Reprise de SubDomain::checkId en attendant un meilleur placement dans Arcane
  Integer len = name.length();
  const char* str = name.localstr();
  if (len==0 || !str)
    throw Arcane::FatalErrorException(A_FUNCINFO,String::format("Illegal EntryPoint id '{0}'", name));
  if (!isalpha(str[0]))
    throw Arcane::FatalErrorException(A_FUNCINFO,String::format("Illegal EntryPoint id '{0}'", name));
  for( Integer i=1; i<len; ++i )
    if (!isalpha(str[i]) && !isdigit(str[i]) && str[i]!='_' && str[i]!='.')
      throw Arcane::FatalErrorException(A_FUNCINFO,String::format("Illegal EntryPoint id '{0}'", name));
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
TimeStep::EntryPoints::
checkKey(Integer key)
{
  if (key < 0)
    throw Arcane::FatalErrorException(A_FUNCINFO, String::format("Invalid EntryPoint key '{0}'",key));
  else if (key>=static_cast<Integer>(8*sizeof(Integer)-1))
    throw Arcane::FatalErrorException(A_FUNCINFO, String::format("Too large EntryPoint key '{0}'",key));
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_ARCGEOSIM_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
