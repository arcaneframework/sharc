// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
// -*- C++ -*-
/* Author : desrozis at Mon Jun 29 15:42:33 2015
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "ArcGeoSim/Tests/ServiceTesters/IServiceTester.h"
#include "GumpExampleTester_axl.h"

#include "Example/Entities.h"
#include "Example/Properties.h"
#include "Example/Builders/Factory.h"
#include "Example/XPath.h"

#include "ArcGeoSim/Physics/Gump/IO.h"
#include "ArcGeoSim/Physics/Gump/Pack.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class GumpExampleTesterService
  : public ArcaneGumpExampleTesterObject
{
public:
 
  GumpExampleTesterService(const Arcane::ServiceBuildInfo& sbi)
    : ArcaneGumpExampleTesterObject(sbi) {}
  
  ~GumpExampleTesterService() {}
  
public:
  
  void init() {}
  Arcane::Integer test();
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Arcane::Integer
GumpExampleTesterService::
test()
{
  Example::System system;
  
  info() << " ";
  info() << "** build example system";
  info() << " ";
  {
    Example::Factory factory;
    
    auto co2w = factory.newSpecies("co2w");
    auto co2g = factory.newSpecies("co2g");
    auto h2ow = factory.newSpecies("h2ow");
    auto h2og = factory.newSpecies("h2og");
    auto clay = factory.newSpecies("clay");
    auto sand = factory.newSpecies("sand");

    auto water = factory.newFluidPhase("water");
    water << co2w << h2ow;

    auto gas = factory.newFluidPhase("gas");
    gas << co2g << h2og;

    auto rock = factory.newSolidPhase("rock");
    rock << clay << sand;

    auto fluid = factory.newFluidSubSystem("fluid");
    fluid << water << gas;

    auto solid = factory.newSolidSubSystem("solid");
    solid << rock;

    auto root = factory.newSystem("system", fluid, solid).entity();

    system = Example::System(root);
  }
  
  info() << system;

  info() << " ";
  info() << "** enumerate subsystem, phase and species";
  info() << " ";
  ENUMERATE_SUBSYSTEM(isubsystem, system.subSystems()) {
    info() << "  " << *isubsystem;
    ENUMERATE_PHASE(iphase, isubsystem->phases()) {
      info() << "    " << *iphase;
      ENUMERATE_SPECIES(ispecies, iphase->species()) {
        info() << "      " << *ispecies;
      }
    }
  }

  info() << " ";
  info() << "** enumerate [c++11] subsystem, phase and species";
  info() << " ";
  for(auto subsystem : system.subSystems()) {
    info() << "  " << subsystem;
    for(auto phase : subsystem.phases()) {
      info() << "    " << phase;
      for(auto species : phase.species()) {
        info() << "      " << species;
      }
    }
  }

  info() << " ";
  info() << "** enumerate species from system";
  info() << " ";
  ENUMERATE_SPECIES(ispecies, system.species()) {
    info() << *ispecies;
  }

  info() << " ";
  info() << "** enumerate phase from system";
  info() << " ";
  ENUMERATE_PHASE(iphase, system.phases()) {
    info() << *iphase;
  }

  info() << " ";
  info() << "** enumerate fluid phase from fluid";
  info() << " ";
  auto fluid = system.fluidSubSystem();
  ENUMERATE_PHASE(iphase, fluid.phases()) {
    info() << "fluid phase : " << *iphase;
  }

  info() << " ";
  info() << "** enumerate fluid phase from system";
  info() << " ";
  ENUMERATE_PHASE(iphase, system.phases()) {
    info() << "fluid phase : " << *iphase;
  }

  info() << " ";
  info() << "** property xpath";
  info() << " ";
  {
    Gump::XPath<Gump::Entity> xpath;

    xpath.debug(system);

    auto water = xpath(system,"system.fluid.water");

    info() << water;
  }
  {
    Example::XPath xpath(system);

    auto water = xpath.entity("[Phase]water");

    info() << water;
  
    auto fluid_phases = xpath.entities("[SubSystem]fluid->[Phase]*");

    for(auto phase : fluid_phases)
      info() << phase;
  
    auto phases = xpath.entities("[Phase]*");

    for(auto phase : phases)
      info() << phase;
  }
  {
    auto water = Example::XPath::entity(system,"[Phase]water");

    info() << water;
  
    auto fluid_phases = Example::XPath::entities(system,"[SubSystem]fluid->[Phase]*");

    for(auto phase : fluid_phases)
      info() << phase;
  
    auto phases = Example::XPath::entities(system,"[Phase]*");

    for(auto phase : phases)
      info() << phase;
  }

  Gump::Property p0(0, system);
  info() << "property " << p0.name()
         << ", uid = " << p0.uniqueId();
  info() << p0;

  Gump::Property p1(1, system);
  info() << "property " << p1.name()
         << ", uid = " << p1.uniqueId();
  info() << p1;

  {
    Gump::XPath<Gump::Property> xpath;

    xpath.debug(system);

    {
      auto p = xpath(system,"system.fluid.Permeability");
      info() << p;
    }
    {
      auto p = xpath(system,"system.solid.rock.clay.MolarFraction");
      info() << p;      
    }
    {
      auto p = xpath(system,"system.Pressure");
      info() << p;
    }
    {
      auto p = xpath(system,"system.Temperature");
      info() << p;
    }
  }

  {
    Example::XPath xpath(system);

    {
      auto p = xpath.property("[SubSystem]fluid::Permeability");
      info() << p;
    }
    {
      auto p = xpath.property("[Species]clay::MolarFraction");
      info() << p;      
    }
    {
      auto p = xpath.property("[System]system::Pressure");
      info() << p;
    }
    {
      auto p = xpath.property("[System]system::Temperature");
      info() << p;
    }

    auto molar_fractions = xpath.properties("[Species]*::MolarFraction");

    for(auto molar_fraction : molar_fractions)
      info() << molar_fraction;
  }
  {
    {
      auto p = Example::XPath::property(system,"[SubSystem]fluid::Permeability");
      info() << p;
    }
    {
      auto p = Example::XPath::property(system,"[Species]clay::MolarFraction");
      info() << p;      
    }
    {
      auto p = Example::XPath::property(system,"[System]system::Pressure");
      info() << p;
    }
    {
      auto p = Example::XPath::property(system,"[System]system::Temperature");
      info() << p;
    }

    auto molar_fractions = Example::XPath::properties(system,"[Species]*::MolarFraction");

    for(auto molar_fraction : molar_fractions)
      info() << molar_fraction;
  }
  
  {
    Arcane::SharedArray<std::shared_ptr<Arcane::String>> names;
    for(auto sp : system.species()) {
      names.add(std::make_shared<Arcane::String>(sp.name()));
    }

    Gump::Pack<Example::Species, Arcane::String> pack(names, system.species());

    for(auto sp : system.species()) {
      info() << pack[sp];
    }
  }

  {
    Example::XPath xpath(system);

    auto species = xpath.entities("[Species]*");

    Arcane::SharedArray<std::shared_ptr<Arcane::String>> names;
    for(auto sp : species) {
      names.add(std::make_shared<Arcane::String>(sp.name()));
    }

    Gump::Pack<Example::Species, Arcane::String> pack(names, species);

    for(auto sp : system.species()) {
      info() << pack[sp];
    }
  }
  {
    auto species = Example::XPath::entities(system,"[Species]*");

    Arcane::SharedArray<std::shared_ptr<Arcane::String>> names;
    for(auto sp : species) {
      names.add(std::make_shared<Arcane::String>(sp.name()));
    }

    Gump::Pack<Example::Species, Arcane::String> pack(names, species);

    for(auto sp : system.species()) {
      info() << pack[sp];
    }
  }

  return 1;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_SERVICE_GUMPEXAMPLETESTER(GumpExampleTester, GumpExampleTesterService);
