// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#include "DivKGradTwoPointsServiceTesterService.h"
/* Author : dipietrd at Fri Aug 29 15:45:29 2008
 * Generated by createNew
 */

using namespace Arcane;

//const Real PI = 3.14159265358979e+00;

#include <arcane/mesh/ItemFamily.h>
#include <boost/shared_ptr.hpp>

#include "ArcGeoSim/Appli/IAppServiceMng.h"
#include "ArcGeoSim/Mesh/Geometry/IGeometryMng.h"

#include "ArcGeoSim/Utils/ItemGroupBuilder.h"

/*---------------------------------------------------------------------------*/

void DivKGradTwoPointsServiceTesterService::init() 
{
  // Retrieve application service manager
  IServiceMng* service_mng        = subDomain()->serviceMng();
  IAppServiceMng* app_service_mng = IAppServiceMng::instance(service_mng);

  // Retrieve shared geometry service
  m_geometry_service = app_service_mng->find<IGeometryMng>(true);
  if(m_geometry_service == NULL) error() << "Geometry service not found";
  m_geometry_service->init();

  // Create and initialize permeabilitie
  VariableBuildInfo vb(allCells().mesh(), "k", IVariable::PPrivate|IVariable::PTemporary|IVariable::PNoRestore);

  m_k.reset(new VariableCellReal(vb));

  VariableBuildInfo vb3(allCells().mesh(), "k3", IVariable::PPrivate|IVariable::PTemporary|IVariable::PNoRestore);
  m_k3.reset(new VariableCellReal3(vb3));

  VariableBuildInfo vb3x3(allCells().mesh(),"k3x3", IVariable::PPrivate|IVariable::PTemporary|IVariable::PNoRestore);
  m_k3x3.reset(new VariableCellReal3x3(vb3x3));

  Real    kT = 1;
  Real3   kT3(1, 1, 1);
  Real3x3 kT3x3(Real3(1, 0, 0),  Real3(0, 1, 0), Real3(0, 0, 1));

  ENUMERATE_CELL(iT, ownCells()) {
    (*m_k)[*iT]    = kT;
    (*m_k3)[*iT]   = kT3;
    (*m_k3x3)[*iT] = kT3x3;
  }
  m_k->synchronize();
  m_k3->synchronize();
  m_k3x3->synchronize();  
}

/*---------------------------------------------------------------------------*/

int DivKGradTwoPointsServiceTesterService::test() 
{  
  boost::shared_ptr<CoefficientArrayT<Cell> >
    cell_coefficients(new CoefficientArrayT<Cell>(allFaces(), allCells()));
  boost::shared_ptr<CoefficientArrayT<Face> >
    face_coefficients(new CoefficientArrayT<Face>(allFaces(), allCells().outerFaceGroup()));

  // Prepare the operator
  options()->op()->init();

  m_prepare_timer.start();
  options()->op()->prepare(mesh(),
              cell_coefficients.get(),
              face_coefficients.get());
  m_prepare_timer.stop();
  info() << "prepare_time       : " << m_prepare_timer.totalTime();

  // Compute relevant geometric properties
  m_geometry_service->addItemGroupProperty(options()->op()->cells(), options()->op()->getCellGeometricProperties(), IGeometryProperty::PVariable);
  m_geometry_service->addItemGroupProperty(options()->op()->faces(), options()->op()->getFaceGeometricProperties(), IGeometryProperty::PVariable);
  m_geometry_service->update(IGeometryPolicy::nullPolicy());

  // Scalar permeability
  m_form_Real_timer.start();
  options()->op()->formDiscreteOperator(*m_k);
  m_form_Real_timer.stop();
  info() << "form_time          : " << m_form_Real_timer.totalTime();

  // Diagonal tensor permeability
  m_form_Real3_timer.start();
  options()->op()->formDiscreteOperator(*m_k3);
  m_form_Real3_timer.stop();
  info() << "form_3_time        : " << m_form_Real3_timer.totalTime();

  // Full tensor permeability
  m_form_Real3x3_timer.start();
  options()->op()->formDiscreteOperator(*m_k3x3);
  m_form_Real3x3_timer.stop();
  info() << "form_3x3_time      : " << m_form_Real3x3_timer.totalTime();

  options()->op()->finalize();

  return 1;
}

ARCANE_REGISTER_SERVICE_DIVKGRADTWOPOINTSSERVICETESTER(DivKGradTwoPointsServiceTester,DivKGradTwoPointsServiceTesterService);
