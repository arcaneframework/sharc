// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_TESTS_SERVICETESTERS_DIVKGRADTWOPOINTSSERVICETESTER_DIVKGRADTWOPOINTSSERVICETESTERSERVICE_H
#define ARCGEOSIM_TESTS_SERVICETESTERS_DIVKGRADTWOPOINTSSERVICETESTER_DIVKGRADTWOPOINTSSERVICETESTERSERVICE_H
/* Author : dipietrd at Fri Aug 29 15:45:29 2008
 * Generated by createNew
 */

#include <arcane/Timer.h>
#include <boost/shared_ptr.hpp>

#include "ArcGeoSim/Tests/ServiceTesters/IServiceTester.h"

using namespace Arcane;

#include "ArcGeoSim/Numerics/DiscreteOperator/IDivKGradDiscreteOperator.h"

#include "DivKGradTwoPointsServiceTester_axl.h"

class IGeometryMng;
class DivKGradTwoPointsServiceTesterService :
public ArcaneDivKGradTwoPointsServiceTesterObject
{
 public:
  /** Constructeur de la classe */
  DivKGradTwoPointsServiceTesterService(const Arcane::ServiceBuildInfo & sbi) : 
    ArcaneDivKGradTwoPointsServiceTesterObject(sbi),
    m_geometry_service(NULL),
    m_prepare_timer(sbi.subDomain(), "Prepare", Timer::TimerVirtual),
    m_form_Real_timer(sbi.subDomain(), "FormReal", Timer::TimerVirtual),
    m_form_Real3_timer(sbi.subDomain(), "FormReal3", Timer::TimerVirtual),
    m_form_Real3x3_timer(sbi.subDomain(), "FormReal3x3", Timer::TimerVirtual),
    m_reference_timer(sbi.subDomain(),"Reference",Timer::TimerVirtual),
    m_reference_temis_comparison_timer(sbi.subDomain(),"ReferenceTemisComparison",Timer::TimerVirtual)
    {
      ;
    }
  
  /** Destructeur de la classe */
  virtual ~DivKGradTwoPointsServiceTesterService() 
    {
    }
  
 public:

  //! Initialization
  void init();
  //! Run the test
  int test();

 private:
  // Geometry service
  IGeometryMng * m_geometry_service;

  // Operator
  IDivKGradDiscreteOperator* m_op;

  // Permeabilities
  boost::shared_ptr<VariableCellReal> m_k;
  boost::shared_ptr<VariableCellReal3> m_k3;
  boost::shared_ptr<VariableCellReal3x3> m_k3x3;

  // Cell centers
  boost::shared_ptr<VariableFaceReal3> m_f_centers;
  boost::shared_ptr<VariableFaceReal3> m_f_normals;
  boost::shared_ptr<VariableCellReal3> m_c_centers;
  boost::shared_ptr<FaceGroup> m_boundary_faces;
  
  // Timers
  Timer m_prepare_timer;
  Timer m_form_Real_timer;
  Timer m_form_Real3_timer;
  Timer m_form_Real3x3_timer;
  Timer m_reference_timer;
  Timer m_reference_temis_comparison_timer;

 private:
  //  void _reference_implementation();
};

#endif /* ARCGEOSIM_TESTS_SERVICETESTERS_DIVKGRADTWOPOINTSSERVICETESTER_DIVKGRADTWOPOINTSSERVICETESTERSERVICE_H */
