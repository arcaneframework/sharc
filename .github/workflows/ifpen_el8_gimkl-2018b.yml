name: IFPEN el8 gimkl/2018b

on:
  push:
    branches: [ main, dev/cea, dev/ifpen, dev/ci_ifpen ]
  pull_request:
    branches: [ main, dev/cea, dev/ifpen, dev/ci_ifpen ]
  workflow_dispatch:
    inputs:
      ctest_options:
        description: 'CTest options'
        required: false
        default: ''

env:
  # Framework directories
  ARCANE_BUILD_DIR: /__w/sharc/sharc/arcane_build
  ARCANE_INSTALL_DIR: /__w/sharc/sharc/arcane_install
  ARCANE_SOURCE_DIR: /__w/sharc/sharc/arcane_source
  ARCANE_EXT_LIB_SUBDIR: extlib # /__w/sharc/shark/arcane_build/extlib
  # ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_DIR: '/__w/framework/framework/ccache'
  CCACHE_MAXSIZE: 5G
  # CMake
  CM_BUILD_OPTS: "-j4"
  CM_BUILD_TYPE: Release
  CM_CCACHE_OPTS: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
  # CTest
  CT_OPTS: "--timeout 300 --output-on-failure --exclude-regex '(^hydro5_4proc_3sd_4proc$|^alien.interface.c.seq.mpi-1$|^alien.interface.fortran.seq.mpi-1$|.petsc.mumps|^vtk_vtu$|^ios_vtu$|^ios_xmf$)' ${{ github.event.inputs.ctest_options }}"
  # For intel MPI to fix errors appearing in July 2023
  I_MPI_SHM_LMT: shm
  # To remove test output directory to reduce disk usage
  ARCANE_TEST_CLEANUP_AFTER_RUN : 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 120
    container:
      image: ghcr.io/arcaneframework/arcane-ifpen-devenv-gimkl-2018b:el8
      #options: --user root  # Avoid to match github UID in container.
    strategy:
      fail-fast: false

    steps:

      # ccache

      - name: Get date
        id: get-date
        shell: bash
        run: echo "NOW=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Restore cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ifpen-el8-gimkl-2018b-${{ env.CM_BUILD_TYPE }}-${{ env.NOW }}-${{ github.run_number }}
          restore-keys: ifpen-el8-gimkl-2018b-${{ env.CM_BUILD_TYPE }}-

      # Installation

      - name: Arcane: Checkout
        id: arcane-checkout
        if: |
          (success() || failure())
        uses: actions/checkout@v4
        with:
          path: ${{ env.ARCANE_ARCANE_SOURCE_DIR }}
          submodules: true
          ref: main

      - name: Arcane: Modules information
        id: arcane_modules_information
        if: |
          (success() || failure()) &&
          steps.checkout.outcome == 'success'
        shell: bash
        run: module --terse list 2>&1 | sort

      - name: Arcane: Configure
        id: arcane-configure
        if: |
          (success() || failure()) &&
          steps.checkout.outcome == 'success'
        shell: bash
        run: cmake -S ${{ env.ARCANE_SOURCE_DIR }} -B ${{ env.ARCANE_BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.ARCANE_INSTALL_DIR }} ${{ env.CM_CCACHE_OPTS }} -DCMAKE_BUILD_TYPE=${{ env.CM_BUILD_TYPE }} -DARCCORE_BUILD_MODE=Check -DREMOVE_UID_ON_DETACH=ON -DUSE_GTEST_DEATH_TEST=ON -DCMAKE_DISABLE_FIND_PACKAGE_Papi=ON -DALIEN_BUILD_COMPONENT=all -DALIEN_PLUGIN_HYPRE=ON -DALIEN_PLUGIN_PETSC=ON -DUSE_GRAPH_CONNECTIVITY_POLICY=ON

      - name: Arcane: Build
        id: arcane-build
        if: |
          (success() || failure()) &&
          steps.configure.outcome == 'success'
        shell: bash
        run: cmake --build ${{ env.ARCANE_BUILD_DIR }} ${{ env.CM_BUILD_OPTS }}

      - name: Arcane: Clean
        id: arcane-clean
        if: |
          (success() || failure()) &&
          steps.build.outcome == 'success'
        shell: bash
        run: find ${{ env.ARCANE_BUILD_DIR }} -type f -name '*.o' -exec rm -f '{}' \;

      - name: Arcane: Install
        id: arcane-install
        if: |
          (success() || failure()) &&
          steps.build.outcome == 'success'
        shell: bash
        run: cmake --install ${{ env.ARCANE_BUILD_DIR }}

      - name: Arcane: Copy external libraries
        id: arcane-copy-external-libraries
        if: |
          (success() || failure()) &&
          steps.install.outcome == 'success'
        shell: bash
        run: |
          cd ${{ env.ARCANE_BUILD_DIR }}
          echo '--'
          cat /scripts/copyextlib_github.sh
          echo '--'
          bash /scripts/copyextlib_github.sh

      #- name: Arcane: Tar build artifact for Arcane
      #  shell: bash
      #  run: tar czf build-artifact.tar.gz ${{ env.ARCANE_BUILD_DIR }}

      #- name: Arcane: Upload build artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: build-artifact
      #    path: build-artifact.tar.gz
      #    retention-days: 1

      - name: Arcane: Save cache
        id: arcane-save-cache
        if: |
          (success() || failure()) &&
          steps.build.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key:  ${{ steps.restore-cache.outputs.cache-primary-key }}

  #test:
  #  name: test
  #  needs:
  #    - build
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 120
  #  container:
  #    image: ghcr.io/arcaneframework/arcane-ifpen-devenv-gimkl-2018b-rt:el8
  #    #options: --user root  # Avoid to match github UID in container.
  #  strategy:
  #    fail-fast: false

  #  steps:

  #    - name: Checkout
  #      id: checkout
  #      if: |
  #        (success() || failure())
  #      uses: actions/checkout@v4
  #      with:
  #        path: ${{ env.ARCANE_SOURCE_DIR }}
  #        submodules: true

  #    - name: Download build artifact
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: build-artifact

  #    - name: Untar build artifact
  #      shell: bash
  #      run: tar xf build-artifact.tar.gz -C /

  #    - name: Remove build artifact tar
  #      shell: bash
  #      run: rm -f build-artifact.tar.gz

  #    - name: Test
  #      id: test
  #      shell: bash
  #      run: env LD_LIBRARY_PATH=${{ env.ARCANE_BUILD_DIR }}/${{ env.EXT_LIB_SUBDIR }}:${LD_LIBRARY_PATH} ctest --test-dir ${{ env.ARCANE_BUILD_DIR }} ${{ env.CT_OPTS }}

  #    - name: Upload test artifact
  #      id: upload-test-artifact
  #      uses: actions/upload-artifact@v4
  #      if: |
  #        (success() || failure()) &&
  #        steps.test.outcome == 'failure'
  #      with:
  #        name: test-artifact
  #        path: ${{ env.ARCANE_BUILD_DIR }}/Testing
  #        retention-days: 1
